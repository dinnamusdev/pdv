    /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dinnamus.ui.InteracaoUsuario.Venda;

import br.String.ManipulacaoString;
import br.TratamentoNulo.TratamentoNulos;
import br.com.FormatarNumeros;
import br.com.info.Sistema;
import br.com.log.LogDinnamus;
import br.com.repositorio.DAO_RepositorioLocal;
import br.com.ui.ItemLista;
import br.com.ui.MetodosUI_Auxiliares_1;
import br.com.ui.ValidarCelula;
import br.data.ManipularData;
import br.ui.teclas.TeclasDeAtalho;
import br.ui.teclas.controleteclas;
import com.toedter.calendar.JDateChooser;
import MetodosDeNegocio.Fachada.vendedor;
import MetodosDeNegocio.Seguranca.UsuarioAuditar;
import MetodosDeNegocio.Seguranca.UsuarioSistema;
import MetodosDeNegocio.Venda.Estoque;
import MetodosDeNegocio.Venda.ItensDevolvidosRN;
import MetodosDeNegocio.Venda.Troca;
import MetodosDeNegocio.Venda.pdvgerenciar;
import dinnamus.ui.InteracaoUsuario.Estoque.frmPesquisarProduto;
import UI.Seguranca.ValidarAcessoAoProcesso;
import dinnamus.ui.componentes.tabela.EditorTabela;
import dinnamus.ui.componentes.tabela.Tabela_RecursosAdicionais;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Date;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Set;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.PlainDocument;

/**
 *
 * @author Fernando
 */
public class frmPDV_SimplesTroca extends javax.swing.JDialog {

    /**
     * Creates new form frmPDV_SimplesTroca
     */
    private int CodigoFilial=0;
    //private Long CodigoVenda=0l;
    public Long CodigoTroca =0l;
    public Double ValorCreditoTroca =0d;
    private Long CodigoVendaVinculada =0l;    
    private ResultSet rsDadosTroca = null;
    public Double ValorVenda = 0d;
    private boolean Consultar = false;
    private boolean IniciarUI =false;
    private boolean VendaFiscal = false;
    private boolean PreVenda = false;
    
    public frmPDV_SimplesTroca(java.awt.Frame parent, boolean modal,int CodigoFilial,Long CodigoTroca,Long CodigoVendaVinculada,boolean Consultar, Double ValorVenda, boolean VendaFiscal, boolean PreVenda) {
        super(parent, modal);
        initComponents();
        Dimension d = dbgItensDevolvidos.getSize();
        //DAO_RepositorioLocal.setPontoDeSalvamento(null);
        this.CodigoFilial = CodigoFilial;
        this.CodigoTroca = CodigoTroca;
        this.Consultar = Consultar;
        this.CodigoVendaVinculada = CodigoVendaVinculada;
        this.ValorVenda = ValorVenda;
        this.VendaFiscal = VendaFiscal;
        this.PreVenda=PreVenda;
        IniciarUI=IniciarUI(Consultar);
        
        
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        PainelTroca = new javax.swing.JPanel();
        PainelCorpo = new javax.swing.JPanel();
        PainelTotal = new javax.swing.JPanel();
        lblTotalDevolvido = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblQtDevolvido = new javax.swing.JLabel();
        PainelBotoes = new javax.swing.JPanel();
        btConfirmar = new javax.swing.JButton();
        btRemover = new javax.swing.JButton();
        btSituacaoProduto = new javax.swing.JButton();
        PainelDadosTroca = new javax.swing.JPanel();
        txtNomeCliente = new javax.swing.JTextField();
        txtDataTroca = new JDateChooser("dd/MM/yyyy", "##/##/####", '_');
        txtIDCliente = new javax.swing.JTextField();
        cbAtendente = new javax.swing.JComboBox();
        txtObs = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtIDTRoca = new javax.swing.JTextField();
        chkMovEstoque = new javax.swing.JCheckBox();
        PainelGrid = new javax.swing.JPanel();
        dbgItensDevolvidos = new br.com.ui.JTableDinnamuS();
        PainelTotalVenda = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        lblSaldoDevedor = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblValorApagar = new javax.swing.JLabel();
        PainelTopo = new javax.swing.JPanel();
        lblNomeModulo = new javax.swing.JLabel();
        btFechar3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(834, 521));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        PainelTroca.setBackground(new java.awt.Color(255, 255, 204));
        PainelTroca.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PainelTroca.setLayout(new java.awt.GridBagLayout());

        PainelCorpo.setBackground(new java.awt.Color(255, 255, 255));
        PainelCorpo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PainelCorpo.setLayout(new java.awt.GridBagLayout());

        PainelTotal.setBackground(new java.awt.Color(255, 255, 255));
        PainelTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PainelTotal.setLayout(new java.awt.GridBagLayout());

        lblTotalDevolvido.setBackground(new java.awt.Color(51, 51, 255));
        lblTotalDevolvido.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTotalDevolvido.setForeground(new java.awt.Color(51, 51, 255));
        lblTotalDevolvido.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalDevolvido.setText("0,00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 91;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 13, 12);
        PainelTotal.add(lblTotalDevolvido, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("QT ITENS DEVOLVIDO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 58;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 12, 0, 0);
        PainelTotal.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 255));
        jLabel3.setText("VALOR DO CRÉDITO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        PainelTotal.add(jLabel3, gridBagConstraints);

        lblQtDevolvido.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblQtDevolvido.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblQtDevolvido.setText("000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 120;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 6, 0, 12);
        PainelTotal.add(lblQtDevolvido, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        PainelCorpo.add(PainelTotal, gridBagConstraints);

        PainelBotoes.setBackground(new java.awt.Color(0, 0, 0));
        PainelBotoes.setLayout(new java.awt.GridBagLayout());

        btConfirmar.setBackground(new java.awt.Color(0, 0, 0));
        btConfirmar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btConfirmar.setForeground(new java.awt.Color(255, 255, 255));
        btConfirmar.setMnemonic('x');
        btConfirmar.setText("CONFIRMAR DADOS - [F3]");
        btConfirmar.setToolTipText("");
        btConfirmar.setBorderPainted(false);
        btConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmarActionPerformed(evt);
            }
        });
        btConfirmar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btConfirmarKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelBotoes.add(btConfirmar, gridBagConstraints);

        btRemover.setBackground(new java.awt.Color(0, 0, 0));
        btRemover.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btRemover.setForeground(new java.awt.Color(255, 255, 255));
        btRemover.setMnemonic('r');
        btRemover.setText("REMOVER ITEM- [Delete]");
        btRemover.setBorderPainted(false);
        btRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoverActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelBotoes.add(btRemover, gridBagConstraints);

        btSituacaoProduto.setBackground(new java.awt.Color(0, 0, 0));
        btSituacaoProduto.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btSituacaoProduto.setForeground(new java.awt.Color(255, 255, 255));
        btSituacaoProduto.setText("SITUAÇÃO PRODUTO - [Espaço]");
        btSituacaoProduto.setBorderPainted(false);
        btSituacaoProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSituacaoProdutoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        PainelBotoes.add(btSituacaoProduto, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        PainelCorpo.add(PainelBotoes, gridBagConstraints);

        PainelDadosTroca.setBackground(new java.awt.Color(255, 255, 255));
        PainelDadosTroca.setLayout(new java.awt.GridBagLayout());

        txtNomeCliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtNomeCliente.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 6, 2);
        PainelDadosTroca.add(txtNomeCliente, gridBagConstraints);

        txtDataTroca.setBackground(new java.awt.Color(255, 255, 255));
        txtDataTroca.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDataTroca.getDateEditor().getUiComponent().addKeyListener(

            new KeyAdapter() {
                @Override
                public void keyTyped(KeyEvent e) {}

                @Override
                public void keyPressed(KeyEvent e) {
                    if(e.getKeyCode()==KeyEvent.VK_ENTER){
                        //txtDataFinal.requestFocus();
                    }
                }
                @Override
                public void keyReleased(KeyEvent e) {}

            }
        );
        txtDataTroca.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDataTrocaFocusGained(evt);
            }
        });
        txtDataTroca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDataTrocaKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(7, 3, 7, 3);
        PainelDadosTroca.add(txtDataTroca, gridBagConstraints);

        txtIDCliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtIDCliente.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 6, 3);
        PainelDadosTroca.add(txtIDCliente, gridBagConstraints);

        cbAtendente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbAtendente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<< ESCOLHA UM ATENDENTE >>" }));
        cbAtendente.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        PainelDadosTroca.add(cbAtendente, gridBagConstraints);

        txtObs.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtObs.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 6, 3);
        PainelDadosTroca.add(txtObs, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("CODIGO TROCA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        PainelDadosTroca.add(jLabel1, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("ATENDENTE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(6, 4, 6, 3);
        PainelDadosTroca.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("DOC CLIENTE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 3;
        PainelDadosTroca.add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("OBS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        PainelDadosTroca.add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("CLIENTE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        PainelDadosTroca.add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("DATA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        PainelDadosTroca.add(jLabel8, gridBagConstraints);

        txtIDTRoca.setEditable(false);
        txtIDTRoca.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtIDTRoca.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtIDTRoca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDTRocaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 7, 3);
        PainelDadosTroca.add(txtIDTRoca, gridBagConstraints);

        chkMovEstoque.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chkMovEstoque.setSelected(true);
        chkMovEstoque.setText("MOVIMENTAR ESTOQUE");
        chkMovEstoque.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        chkMovEstoque.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 6, 0);
        PainelDadosTroca.add(chkMovEstoque, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        PainelCorpo.add(PainelDadosTroca, gridBagConstraints);

        PainelGrid.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ITENS DEVOLVIDOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        PainelGrid.setOpaque(false);
        PainelGrid.setLayout(new java.awt.GridBagLayout());

        dbgItensDevolvidos.setExibirBarra(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(6, 5, 6, 4);
        PainelGrid.add(dbgItensDevolvidos, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.3;
        PainelCorpo.add(PainelGrid, gridBagConstraints);

        PainelTotalVenda.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PainelTotalVenda.setOpaque(false);
        PainelTotalVenda.setLayout(new java.awt.GridBagLayout());

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("  SALDO DEVEDOR");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelTotalVenda.add(jLabel9, gridBagConstraints);

        lblSaldoDevedor.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblSaldoDevedor.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSaldoDevedor.setText("0,00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 51, 0, 51);
        PainelTotalVenda.add(lblSaldoDevedor, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setText("  VALOR A PAGAR");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelTotalVenda.add(jLabel10, gridBagConstraints);

        lblValorApagar.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblValorApagar.setForeground(new java.awt.Color(255, 0, 0));
        lblValorApagar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblValorApagar.setText("0,00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 51, 0, 51);
        PainelTotalVenda.add(lblValorApagar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        PainelCorpo.add(PainelTotalVenda, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        PainelTroca.add(PainelCorpo, gridBagConstraints);

        PainelTopo.setBackground(new java.awt.Color(0, 0, 0));
        PainelTopo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PainelTopo.setLayout(new java.awt.GridBagLayout());

        lblNomeModulo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblNomeModulo.setForeground(new java.awt.Color(255, 255, 255));
        lblNomeModulo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNomeModulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/TROCA.png"))); // NOI18N
        lblNomeModulo.setText("PDV - [ CRÉDITO DE TROCA ]");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        PainelTopo.add(lblNomeModulo, gridBagConstraints);

        btFechar3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btFechar3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Shut down_16x16.png"))); // NOI18N
        btFechar3.setMnemonic('x');
        btFechar3.setToolTipText("");
        btFechar3.setBorderPainted(false);
        btFechar3.setOpaque(false);
        btFechar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFechar3ActionPerformed(evt);
            }
        });
        btFechar3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btFechar3KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        PainelTopo.add(btFechar3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        PainelTroca.add(PainelTopo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(PainelTroca, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private boolean IniciarUI(boolean Consultar){
          try {
              
              MetodosUI_Auxiliares_1.MaximizarJanelaDeDialogo(this);
              
              this.setLocationRelativeTo(null);
             
              /*if(!Sistema.isOnline()){
                  MetodosUI_Auxiliares.MensagemAoUsuarioSimplesAVISO(null, "SISTEMA OFFLINE - TROCA NÃO DISPONIVEL", lblNomeModulo.getText());
                  return false;
              }
              */
              if(!IniciarUI_TeclaAtalho()){
                  return false;
              }
             
              //if(this.CodigoVendaVinculada>0l){              
              //    this.CodigoTroca =  Troca.RetornaTrocas_PorVenda(true, this.CodigoVendaVinculada);
              //}
              Dimension d = dbgItensDevolvidos.getSize();
              
              if(!IniciarDbgItensDevolvidos(this.CodigoTroca)){
                  return false;
              }
              if(!IniciarCbAtendente()){
                  return false;
              }
              if(!AtualizarCamposTotais()){
                  return false;
              }
              dbgItensDevolvidos.getjTable().requestFocus();
              if(dbgItensDevolvidos.getjTable().getRowCount()>0){
                dbgItensDevolvidos.getjTable().setRowSelectionInterval(0, 0);
                dbgItensDevolvidos.getjTable().setColumnSelectionInterval(1, 1);
              }             
              controleteclas.UsarTeclaNaTrocaDeCampos(this, KeyEvent.VK_ENTER);
              controleteclas.SetarTodosOsBotoes(this.getContentPane());              
              if(this.CodigoTroca==0l){
                  txtDataTroca.setDate(ManipularData.DataAtual());
                  CriarTroca();
                  MetodosUI_Auxiliares_1.BloquearDesbloquearComponentes(PainelDadosTroca, true);
                  MetodosUI_Auxiliares_1.BloquearDesbloquearComponentes(PainelBotoes, true);
                  dbgItensDevolvidos.getTbDinnamuS().setEditavel(true);
              }else{
                  CarregarDadosTroca(this.CodigoTroca);
                  MetodosUI_Auxiliares_1.BloquearDesbloquearComponentes(PainelDadosTroca, false);
                  if(this.CodigoVendaVinculada==0l){
                    MetodosUI_Auxiliares_1.BloquearDesbloquearComponentes(PainelBotoes, false);
                    dbgItensDevolvidos.getTbDinnamuS().setEditavel(false);
                  }
              }
              if(this.CodigoVendaVinculada==0l){                  
                  PainelDadosTroca.setVisible(true);
                  chkMovEstoque.setSelected(true);
                  PainelTotalVenda.setVisible(false);
                  //cbAtendente.requestFocus();
                  cbAtendente.requestFocus();
              }else{
                 PainelDadosTroca.setVisible(false);
                 chkMovEstoque.setSelected(false);
                 PainelTotalVenda.setVisible(true);
                 lblSaldoDevedor.setText("R$ "+ FormatarNumeros.FormatarParaMoeda(this.ValorVenda));
                 dbgItensDevolvidos.getjTable().requestFocus();
              }
              
              if (PreVenda) {
                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Esta troca somente poderá ser editada na PRÉ-VENDA/COTAÇÃO", "PRE-VENDA COM TROCA");
                  
              }

              
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }    
    }
    private boolean CarregarDadosTroca(Long CodigoTroca){
            try {
            
                rsDadosTroca = Troca.TrocasRealizadas(false, CodigoTroca);
                if(rsDadosTroca.next()){
                   txtDataTroca.setDate(rsDadosTroca.getDate("data"));
                   int Atendente = rsDadosTroca.getInt("atendente");
                   MetodosUI_Auxiliares_1.SetarOpcaoCombo_Model(cbAtendente, Atendente);
                   txtIDCliente.setText(rsDadosTroca.getString("idcliente"));
                   txtNomeCliente.setText(rsDadosTroca.getString("nomecliente"));
                   txtObs.setText(rsDadosTroca.getString("obs"));
                   txtIDTRoca.setText(CodigoTroca.toString());
                }
            
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
            
    private boolean CriarTroca(){
        try {
            
            //if(rsDadosTroca==null){
                this.CodigoTroca = DAO_RepositorioLocal.NovoValorIdentidade("off_troca", Sistema.getLojaAtual(), pdvgerenciar.CodigoPDV());
                rsDadosTroca = Troca.TrocasRealizadas(false, this.CodigoTroca);                
                rsDadosTroca.moveToInsertRow();
                rsDadosTroca.updateLong("id", this.CodigoTroca);
                if(this.CodigoVendaVinculada>0l){
                   rsDadosTroca.updateLong("codigovendacreditada", this.CodigoVendaVinculada); 
                }
                rsDadosTroca.insertRow();  
                rsDadosTroca.moveToCurrentRow();
                //dbgItensDevolvidos.setRsDados(rsDadosTroca);
                //rsDadosTroca.refreshRow();
                NovaLinha(this.CodigoTroca);
            //}
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    private ArrayList<Double> TotalizarTroca(){
        ArrayList<Double> totais = new ArrayList<Double>();
        try {
           
            ResultSet c = dbgItensDevolvidos.getRsDados();
            
            c.beforeFirst();
           
            Double Total = 0d;//ItensDevolvidosRN.ItensDevolvidos_Somar(CodigoVenda,false);
            Double Qt = 0d;//ItensDevolvidosRN.ItensDevolvidos_ContarItens(CodigoVenda,false);
            
            while(c.next()){
                Qt += c.getDouble("quantidade");
                Total+=c.getDouble("total");            
            }
            totais.add(Qt);
            totais.add(Total);
            
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
         
        }
        return totais;
    }
    private boolean AtualizarCamposTotais(){
        try {
           
            ResultSet c = dbgItensDevolvidos.getRsDados();
            
            c.beforeFirst();
            ArrayList<Double> TotaisTroca = TotalizarTroca();
            Double Qt =  TotaisTroca.get(0);//ItensDevolvidosRN.ItensDevolvidos_ContarItens(CodigoVenda,false);
            Double Total = TotaisTroca.get(1);//ItensDevolvidosRN.ItensDevolvidos_Somar(CodigoVenda,false);
            
            lblQtDevolvido.setText(ManipulacaoString.FormataPADL(3, String.valueOf(Qt.intValue()), "0"));
            
            lblTotalDevolvido.setText("R$ " + FormatarNumeros.FormatarParaMoeda(Total));
            
            lblValorApagar.setText("R$ " + FormatarNumeros.FormatarParaMoeda(this.ValorVenda - Total));
            
            
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
  
    public class Troca_Validacoes implements ValidarCelula {

        public Troca_Validacoes() {
            
        }
        
        public boolean Validar(String cColuna, Object obj) {
            
            try {
              if("DESCRICAO".equals(cColuna)){                
                  //String Descricao = TratamentoNulos.getTratarString().Tratar( dbgItensDevolvidos.getTbDinnamuS().getValorCelulaString("descricao"),"");
                  if(obj.toString().trim().equalsIgnoreCase("")){
                     MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "CAMPO DESCRIÇÃO VAZIO NÃO PODE SER LOCALIZADO. DIGITE ALGO", "PDV TROCA");
                     return false; 
                  }
                        
              }else if("QUANTIDADE".equalsIgnoreCase(cColuna) || "PRECO".equalsIgnoreCase(cColuna) ){
                        int LinhaAtual = dbgItensDevolvidos.getLinhaAtual();
                        if(LinhaAtual<0){
                          return false;
                        }
                        Long Codprod = dbgItensDevolvidos.getTbDinnamuS().getValorCelulaLong("codprod",LinhaAtual);
                        if(Codprod==0){
                            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "INFORME UM PRODUTO ANTES DE PREENCHER ESTE CAMPO", "PDV TROCA");
                            return false;
                        }
                        Double nQuantidade =0d;
                        Double nPreco =0d;
                        if("QUANTIDADE".equalsIgnoreCase(cColuna)){
                            obj = obj.toString().replace(",", ".");
                            nQuantidade = Double.parseDouble(obj.toString());
                            Long nQtMaxima = Sistema.getDadosLoja(Sistema.getLojaAtual(),true).getLong("qtmaxima");
                            
                            nQtMaxima = (nQtMaxima==0 ? 99999l : nQtMaxima);
                            
                            if(nQuantidade>nQtMaxima){
                               MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "A QUANTIDADE INFORMADA EXCEDEU O LIMITE PERMITIDO["+ nQtMaxima +"]", "TROCA", "AVISO");  
                               return false;
                            }                            
                            
                            nPreco =  TratamentoNulos.getTratarDouble().Tratar(dbgItensDevolvidos.getTbDinnamuS().getValorCelulaDouble("preco" ,LinhaAtual),0d);
                            
                        }else{
                             obj = obj.toString().replace(",", ".");
                             nPreco = Double.parseDouble(obj.toString());
                             
                             if(nPreco>99999.99d){
                               MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "A PREÇO INFORMADO EXCEDEU O LIMITE PERMITIDO[99.999,99]", "TROCA", "AVISO");  
                               return false;
                            }else{
                                 nQuantidade = TratamentoNulos.getTratarDouble().Tratar(dbgItensDevolvidos.getTbDinnamuS().getValorCelulaDouble("quantidade",LinhaAtual),0d);
                                 obj = obj.toString().replace(",", ".");
                             }
                        }
                        Double Total = nPreco * nQuantidade;
                        
                        dbgItensDevolvidos.getTbDinnamuS().setValorDouble("total", Total,LinhaAtual);
                        //AtualizarCamposTotais();
                }
               return true;
            } catch (Exception e) {
                 int col = dbgItensDevolvidos.getjTable().getSelectedColumn();
                 MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "INFORMAÇÃO DIGITADA INVÁLIDA", "TROCA", "AVISO"); 
                return false;
            }
        }
    
    }
    private boolean TeclaDOWN(){
        
        try {
                if(this.Consultar){
                    return false;
                }
                Long CodProd =0l;

                int latual = dbgItensDevolvidos.getjTable().getSelectedRow();
                int ltotal =dbgItensDevolvidos.getTbDinnamuS().getRowCount();

                if(dbgItensDevolvidos.getTbDinnamuS().getRs().getRow()>0  &&
                   latual==ltotal-1)     
                   {
                       CodProd = dbgItensDevolvidos.getTbDinnamuS().getValorCelulaLong("codprod",latual);
                       if(CodProd>0l){
                           NovaLinha(this.CodigoTroca);                       
                       }
                   }
                      
            
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    private boolean IniciarCbAtendente(){
        try {
            ResultSet rs = vendedor.Listar(Sistema.getLojaAtual());            
            
            return MetodosUI_Auxiliares_1.PreencherCombo(cbAtendente,rs,"nome","codigo",true);
                        
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
            
    private boolean IniciarDbgItensDevolvidos(final Long CodigoTrocaSelecionada){
        try {        
            dbgItensDevolvidos.setAjustaColunaAoPainel(true);
            dbgItensDevolvidos.addClColunas("seq", "SEQ",20,true);
            dbgItensDevolvidos.addClColunas("descricao", "DESCRICAO",150,true,true,dbgItensDevolvidos.Alinhamento_Esqueda);
            dbgItensDevolvidos.addClColunas("quantidade", "QUANT",30,true,true,dbgItensDevolvidos.Alinhamento_Direita);
            dbgItensDevolvidos.addClColunas("preco", "PREÇO",30,true,true,dbgItensDevolvidos.Alinhamento_Direita);
            dbgItensDevolvidos.addClColunas("total", "TOTAL",30,true,false,dbgItensDevolvidos.Alinhamento_Direita);
            dbgItensDevolvidos.addClColunas("nomemov", "SITUAÇÃO",50,true,false,dbgItensDevolvidos.Alinhamento_Centro);
            dbgItensDevolvidos.addNumberFormat("quantidade");     
            dbgItensDevolvidos.addNumberFormat("preco");     
            dbgItensDevolvidos.addNumberFormat("total");     
            dbgItensDevolvidos.setEdicao_ChavePrimaria("idunico");
            dbgItensDevolvidos.setEdicao_ChaveEstrangeira("codigo");
            dbgItensDevolvidos.setEdicao_Tabela("off_trocaitens");            
            //Set<String> ColunasNumericas = dbgItensDevolvidos.getNumberFormat().keySet();                        
            
            dbgItensDevolvidos.getjTable().addPropertyChangeListener("tableCellEditor",new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                        if (!dbgItensDevolvidos.getjTable().isEditing()){   
                            EditorTabela r = (EditorTabela) evt.getOldValue();
                            if(!r.isEdicaoCancelada()){
                                int nCol = dbgItensDevolvidos.getjTable().getSelectedColumn();                            
                                if(nCol ==1){                                   
                                   int nRet = Troca_ProcessarPesquisaGridItens();                                                                                                  
                                   if(nRet==0){
                                       MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "CODIGO NÃO LOCALIZADO", lblNomeModulo.getText());                                     
                                       try {
                                           LimparLinha();
                                           new Robot().keyPress(KeyEvent.VK_LEFT);
                                       } catch (AWTException ex) {
                                           LogDinnamus.Log(ex, true);
                                       }
                                   }else if(nRet==-2){                                       
                                       String NomeImpresso =  TratamentoNulos.getTratarString().Tratar(dbgItensDevolvidos.getTbDinnamuS().getValorCelulaString("nome_impresso"),"");
                                       String Descricao =  TratamentoNulos.getTratarString().Tratar(dbgItensDevolvidos.getTbDinnamuS().getValorCelulaString("descricao"),"");
                                       if(!Descricao.equalsIgnoreCase(NomeImpresso)){
                                          dbgItensDevolvidos.getTbDinnamuS().setValorCelular("descricao", NomeImpresso);
                                           try {
                                               new Robot().keyPress(KeyEvent.VK_LEFT);
                                           } catch (AWTException ex) {
                                              LogDinnamus.Log(ex, true);
                                           }
                                       }
                                   }                                
                                }else if(nCol==3){
                                    try {                                                    
                                        new Robot().keyPress(KeyEvent.VK_DOWN);
                                    } catch (AWTException ex) {
                                        LogDinnamus.Log(ex, true);
                                    }
                                }
                            }
                           AtualizarCamposTotais();                                                            
                        }               
                }
            });                                    
            dbgItensDevolvidos.getjTable().setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {  
                public Component getTableCellRendererComponent(JTable table, Object value,  
                        boolean isSelected, boolean hasFocus, int row, int column) {  
                    super.getTableCellRendererComponent(table, value, isSelected,  
                            hasFocus, row, column);  
                    try {
                        ResultSet c = dbgItensDevolvidos.getRsDados();
                        if(c.getRow()>0){
                            String Situacao = TratamentoNulos.getTratarString().Tratar(c.getString("nomemov"),"");
                            if (Situacao.equalsIgnoreCase("normal")) {                                  
                                setBackground(null);  
                                setForeground(null);
                            } else if (Situacao.equalsIgnoreCase("c/defeito")) {  
                                setBackground(Color.RED);  
                                setForeground(Color.WHITE);
                            }else if (Situacao.equalsIgnoreCase("devolução")) {  
                                   setBackground(Color.BLUE);   
                                   setForeground(Color.WHITE);
                            }else{
                                setBackground(null);  
                                setForeground(null);
                            }  
                        }
                    } catch (Exception e) {
                        LogDinnamus.Log(e, true);
                    }
                    
                    return this;  
                }  
            });             
            //dbgItensDevolvidos.getjTable().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),"selectNextColumnCell");             
            dbgItensDevolvidos.getjTable().setRowSelectionAllowed(false);            
            dbgItensDevolvidos.getjTable().addKeyListener(new KeyAdapter() {
                @Override
                public void keyTyped(KeyEvent e) {if(e.getKeyChar()=='\n'){
                    e.consume();
                }}                         
                @Override
                public void keyPressed(KeyEvent e) {
                    
                    if(e.getKeyCode()==KeyEvent.VK_DOWN){    
                       TeclaDOWN();
                    }else if(e.getKeyCode()==KeyEvent.VK_SPACE){
                         if(!dbgItensDevolvidos.getjTable().isEditing()){
                            btSituacaoProdutoActionPerformed(null);
                         }
                    }else if(e.getKeyCode()==KeyEvent.VK_DELETE){
                         e.consume();
                         RemoverItem();
                    }else if(e.getKeyCode()==KeyEvent.VK_F3){
                           e.consume();        
                           btConfirmarActionPerformed(null);
                    }else if(e.getKeyCode()==KeyEvent.VK_ESCAPE){
                           e.consume();
                           if(dbgItensDevolvidos.getjTable().isEditing()){                               
                              dbgItensDevolvidos.getjTable().getCellEditor().cancelCellEditing();                              
                           }else{
                                TeclaAtalho_Acoes_2(KeyEvent.VK_ESCAPE);
                           }                   
                      }else{
                         if(e.getKeyChar()!='\n'){
                            Tabela_RecursosAdicionais.TratarTeclaPressionada(e, dbgItensDevolvidos);                                            
                        }
                    }
                   // AtualizarCamposTotais();
                }
                @Override
                public void keyReleased(KeyEvent e) { }
            });  
            AtualizarDbgItensDevolvidos(CodigoTrocaSelecionada);          

            dbgItensDevolvidos.getjTable().setDefaultEditor(Object.class,  new EditorTabela(new Troca_Validacoes()));                        
            dbgItensDevolvidos.getjTable().getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),"none"); 
            
            return true;
            
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    private boolean InserirProduto(ResultSet rs){
        try {
            rs.beforeFirst();
            if(rs.next()){
               Long CodProd =  rs.getLong("ig_chaveunica");
               String Descricao = rs.getString("cp_nome");
               Double Valor = rs.getDouble("itp_precovenda");
               Long CodigoSeq = rs.getLong("cp_codigo");
               String Cor = TratamentoNulos.getTratarString().Tratar(rs.getString("cor"),"");
               String Tamanho = TratamentoNulos.getTratarString().Tratar(rs.getString("tamanho"),"");
               int linha = dbgItensDevolvidos.getTbDinnamuS().getRs().getRow();
               dbgItensDevolvidos.getTbDinnamuS().setValorCelular("codprod", CodProd);
               dbgItensDevolvidos.getTbDinnamuS().setValorCelular("descricao", Descricao);
               dbgItensDevolvidos.getTbDinnamuS().setValorCelular("nome_impresso", Descricao);
               dbgItensDevolvidos.getTbDinnamuS().setValorCelular("preco", Valor);
               dbgItensDevolvidos.getTbDinnamuS().setValorCelular("quantidade", 1);
               dbgItensDevolvidos.getTbDinnamuS().setValorCelular("Total", Valor);
               dbgItensDevolvidos.getTbDinnamuS().setValorCelular("nomemov", "NORMAL");
               dbgItensDevolvidos.getTbDinnamuS().setValorCelular("ref", CodigoSeq.toString());
               dbgItensDevolvidos.getTbDinnamuS().setValorCelular("nomecor", Cor);
               dbgItensDevolvidos.getTbDinnamuS().setValorCelular("codtam", Tamanho);
               //int Linha = dbgItensDevolvidos.getTbDinnamuS().getLinhaAtual();
               //dbgItensDevolvidos.getTbDinnamuS().fireTableRowsUpdated(Linha, Linha);
            }
            
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    private int Troca_ProcessarPesquisaGridItens(){
        try {
            
           int nLinhaAtual = dbgItensDevolvidos.LinhaAtualModel();                                                   
           if (nLinhaAtual>=0){
              String cTextoLocalizar = dbgItensDevolvidos.getTbDinnamuS().getValorCelulaString("descricao");             
              if(cTextoLocalizar==null){
                 return -1; 
              }
              if(cTextoLocalizar.trim().length()>0){
                 String cCodigoProduto ="";
                 cTextoLocalizar=cTextoLocalizar.trim();
                 ResultSet rsDadosProduto=null;
                 if(!cTextoLocalizar.matches("[0-9]+")){                     
                     frmPesquisarProduto pesquisa  = new frmPesquisarProduto(null, true, this.CodigoFilial, cTextoLocalizar,true);
                     pesquisa.setVisible(true);
                     cTextoLocalizar = pesquisa.getCodigoProduto();                     
                     if(cTextoLocalizar.trim().length()==0){                                                     
                        return -2; // Nenhum Produto selecionado                        
                     }
                 }                 
                 rsDadosProduto =  Estoque.LocalizacaoRapidaProduto(cTextoLocalizar);       
                 rsDadosProduto.beforeFirst();
                 if(!rsDadosProduto.next()){
                     dbgItensDevolvidos.getjTable().setColumnSelectionInterval(0,0);                                                                         
                     return 0; // nao localizado
                 }
                 if(InserirProduto(rsDadosProduto)){                          
                    dbgItensDevolvidos.getjTable().setColumnSelectionInterval(2, 2);
                    return 1;
                 }              
               }
           }       
        } catch (Exception ex) {
            LogDinnamus.Log(ex, true);
            return -1;
         
        }
        return -1;  
    }
    private boolean UI_IniciarGridItens_AtualizarGrid(Long nCodigoVenda, boolean  bAjustaModelo ){
        try {        
            
            ResultSet rs = ItensDevolvidosRN.ItensDevolvidos_Listar(nCodigoVenda,false,false);
            
            dbgItensDevolvidos.setRsDados(rs,bAjustaModelo);
         
            return true;
        } catch (Exception e) {
            
            LogDinnamus.Log(e, true);
            return false;
        }
    }        
     private Integer NovoSeq(){
         Integer Ret=0;
         try {
             ResultSet c = dbgItensDevolvidos.getRsDados();
             if(c.last()){
                 Ret = c.getInt("seq")+1;
             }
             
         } catch (Exception e) {
             LogDinnamus.Log(e, true);
         }
         return Ret;
    
     }
     private void NovaLinha(Long CodigoTroca){
        try {
           int LinhaAtual = dbgItensDevolvidos.getTbDinnamuS().getLinhaAtual();
           int TotLinha =dbgItensDevolvidos.getTbDinnamuS().getRowCount()-1;
           if(LinhaAtual==TotLinha || TotLinha<0){
              Integer NovoSeq = NovoSeq();
              NovoSeq = NovoSeq==0 ? 1 : NovoSeq;
              dbgItensDevolvidos.getTbDinnamuS().addRow(true,CodigoTroca, Sistema.getLojaAtual(), pdvgerenciar.CodigoPDV(), false,false);                                                                            
              AtualizarDbgItensDevolvidos(CodigoTroca);      
              dbgItensDevolvidos.getTbDinnamuS().getRs().last();
              dbgItensDevolvidos.getTbDinnamuS().setValorCelular("seq",NovoSeq );               
              TotLinha = dbgItensDevolvidos.getjTable().getRowCount()-1;
              dbgItensDevolvidos.getjTable().setRowSelectionInterval(TotLinha,TotLinha);              
              dbgItensDevolvidos.getjTable().setColumnSelectionInterval(1, 1);
           }
        } catch (Exception e) {
             LogDinnamus.Log(e, true);
        }
    } 
    private boolean AtualizarDbgItensDevolvidos(Long CodigoTroca ){
        try {            
            ResultSet rs = Troca.TrocasRealizadas_Itens(CodigoTroca,false,false,false);            
            dbgItensDevolvidos.setRsDados(rs,true);                        
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }    
    private boolean LimparItensSemProduto(){
        try {            
            ResultSet rs =  dbgItensDevolvidos.getRsDados();
            rs.beforeFirst();
            while(rs.next()){
                if(rs.getRow()>=0){
                    if( TratamentoNulos.getTratarLong().Tratar(rs.getLong("codprod"),0l)==0l){
                       rs.deleteRow();
                    }
                }
            }
            AtualizarDbgItensDevolvidos(this.CodigoTroca);
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
            
    private boolean ValidarDadosTroca(){
        try {
            
             if(PreVenda){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Esta troca somente poderá ser editada na PRÉ-VENDA/COTAÇÃO", "PRE-VENDA COM TROCA");
                return false;
            }
            
            if(txtDataTroca.getDate()==null){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "INFORME UMA DATA VÁLIDA", lblNomeModulo.getText());
                return false;
            }
            ItemLista i = (ItemLista) cbAtendente.getSelectedItem();
            if(i==null){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "INFORME UMA ATENDENTE", lblNomeModulo.getText());
                return false;
            }else{
                if(i.getIndice().toString().equalsIgnoreCase("0")){
                     MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "INFORME UMA ATENDENTE", lblNomeModulo.getText());
                }               
            }
            ArrayList<Double> totais = TotalizarTroca();
            if(totais.get(0)==0f){
               MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "TROCA NÃO PODE SER CONFIRMADA COM VALOR 0(ZERO)", lblNomeModulo.getText()); 
               return false;
            }
            if(ValorVenda>0l){
                Double ValorCredito =TotalizarTroca().get(1);
                if(ValorCredito.doubleValue()>ValorVenda.doubleValue()){
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "O VALOR DO CRÉDITO GERADO POR ESTA TROCA ULTRAPASSA O VALOR DO SALDO DEVEDOR DESTA VENDA [ R$ "+ FormatarNumeros.FormatarParaMoeda(ValorVenda) +"]", lblNomeModulo.getText());
                    return false;
                }
                 if(ValorVenda.doubleValue()==ValorCredito.doubleValue()){
                    if(VendaFiscal){
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "O VALOR DO CRÉDITO GERADO POR ESSA TROCA É IGUAL AO VALOR DA VENDA [ R$ "+ FormatarNumeros.FormatarParaMoeda(ValorVenda) +"]\n\nA VENDA NÃO PODERÁ SER EFEITIVADA, TENDO O CUPOM FISCAL COM VALOR 0(ZER0)", lblNomeModulo.getText());
                        return false;                                           
                    }else{
                        if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao(null, "O VALOR DO CRÉDITO GERADO POR ESSA TROCA É IGUAL AO VALOR DA VENDA [ R$ "+ FormatarNumeros.FormatarParaMoeda(ValorVenda) +"]\n\nA VENDA PODERÁ SER EFEITIVADA, PORÉM NÃO SERÁ POSSIVEL EMITIR UM CUPOM FISCAL COM VALOR 0(ZER0)\n\n\nDESEJA CONTINUAR ASSIM MESMO ?", lblNomeModulo.getText())!=MetodosUI_Auxiliares_1.Sim()){
                           return false; 
                        }
                    }
                }
            }
            
         
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    
    private boolean AtualizarDadosTroca(){
        try {
            ItemLista i = (ItemLista) cbAtendente.getSelectedItem();
            rsDadosTroca.absolute(1);
            rsDadosTroca.updateDate("data", new Date( txtDataTroca.getDate().getTime()));
            rsDadosTroca.updateInt("atendente",  new Integer(i.getIndice().toString()));
            rsDadosTroca.updateInt("usuario",  UsuarioSistema.getIdUsuarioLogado());
            rsDadosTroca.updateString("idcliente", txtIDCliente.getText());
            rsDadosTroca.updateString("nomecliente", txtNomeCliente.getText());
            rsDadosTroca.updateString("obs", txtObs.getText());
            //rsDadosTroca.updateLong("codigovendacreditada", this.CodigoVendaVinculada);            
            rsDadosTroca.updateRow();
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    /*

     */
    private boolean ConfirmarTrocar(){
        boolean Ret = false;
        try {            
            if(ConfirmarTrocar_Acao()){
                Ret = DAO_RepositorioLocal.Commitar_Statment();
            }else{
                Ret= DAO_RepositorioLocal.RollBack_Statment();
            }
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);            
        }
        return Ret;
    }
    private boolean ConfirmarTrocar_Acao(){
         try {
             
                if(!AtualizarDadosTroca()){
                    return false;
                }                 

                if(chkMovEstoque.isSelected()){
                  if(!Troca.Efetivar(Sistema.getLojaAtual(), this.CodigoTroca, Sistema.CodigoDaFilial_LojaAtual(), pdvgerenciar.CodigoPDV(),0l)){
                     return false; 
                  }
                }
                return true;
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return false;
    }
    private void btConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmarActionPerformed
        // TODO add your handling code here:
        try {
            if(!btConfirmar.isEnabled()){
               return; 
            }
            if(!LimparItensSemProduto()){
               return; 
            }
            if(!ValidarDadosTroca()){
                return;
            }
            if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao(null, "CONFIRMA OS DADOS DA TROCA?", lblNomeModulo.getText())==MetodosUI_Auxiliares_1.Sim()){
                if(VerificarPermissaoOperador(this.CodigoTroca,chkMovEstoque.isSelected())){                                        
                    boolean RetornoCNFTroca = ConfirmarTrocar();
                    if(RetornoCNFTroca){                        
                        //dbgItensDevolvidos.getRsDados().close();
                        if(this.CodigoVendaVinculada==0l){
                            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesINFO(null, "TROCA EFETIVADA COM SUCESSO", lblNomeModulo.getText());
                        }else{
                            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesINFO(null, "ESTA TROCA AGUARDA A EFETIVAÇÃO DA VENDA PARA SUA CONCLUSÃO NO SISTEMA", lblNomeModulo.getText());
                            this.ValorCreditoTroca =  TotalizarTroca().get(1);
                        }
                        dispose();
                    }else{
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "NÃO FOI POSSÍVEL EFETIVAR A TROCA", lblNomeModulo.getText());
                    }
                }
            }            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }//GEN-LAST:event_btConfirmarActionPerformed

    private void btConfirmarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btConfirmarKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btConfirmarKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        Dimension d = dbgItensDevolvidos.getSize();
        
        if(!IniciarUI){
            dispose();       
        }
        
    }//GEN-LAST:event_formWindowOpened
    private boolean VerificarPermissaoOperador(Long CodigoTroca,boolean MovEstoque){
        try {
            ResultSet c = dbgItensDevolvidos.getTbDinnamuS().getRs();
            c.last();
            if(c.getRow()>0){
               c.beforeFirst();
                int nSituacaoNormal =0;
                int nSituacaoEspecial =0;
                while (c.next()) {                    
                    String TipoTroca = TratamentoNulos.getTratarString().Tratar(c.getString("nomemov"),"");
                    if(!TipoTroca.equalsIgnoreCase("")){
                        if( TipoTroca.equalsIgnoreCase("normal")){
                           nSituacaoNormal++ ;
                        }else {
                            nSituacaoEspecial++ ;
                        }
                    }
                }
                Integer nCodigoUsuario=0;
                if(nSituacaoNormal>0){
                   nCodigoUsuario =ValidarAcessoAoProcesso.Verificar( null , UsuarioSistema.getIdUsuarioLogado(), "TrocaNormal", Sistema.getLojaAtual(), true,"TROCA NORMAL");
                   if(nCodigoUsuario==0){
                      MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "OPERADOR NÃO AUTORIZADO A REALIZAR TROCA NORMAL", lblNomeModulo.getText());
                      return false;
                   }else{
                       UsuarioAuditar.Auditar(nCodigoUsuario, "TROCA", "TROCA NORMAL COD : " + CodigoTroca);
                   }                   
                }
                if(nSituacaoEspecial>0){
                    nCodigoUsuario =ValidarAcessoAoProcesso.Verificar( null ,(nCodigoUsuario==0 ? UsuarioSistema.getIdUsuarioLogado() : nCodigoUsuario), "TrocaDefeito", Sistema.getLojaAtual(), true,"TROCA C/DEFEITO");
                    if(nCodigoUsuario==0){
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "OPERADOR NÃO AUTORIZADO A REALIZAR TROCA NORMAL", lblNomeModulo.getText());
                        return false;
                    }else{
                        UsuarioAuditar.Auditar(nCodigoUsuario, "TROCA", "TROCA C/DEFEITO COD : "+ CodigoTroca );
                    }
                }
                
                if(MovEstoque){
                     nCodigoUsuario =ValidarAcessoAoProcesso.Verificar( null , (nCodigoUsuario==0 ? UsuarioSistema.getIdUsuarioLogado() : nCodigoUsuario), "MovEstTelaTroca", Sistema.getLojaAtual(), true,"MOVIMENTAR ESTOQUE");
                    if(nCodigoUsuario==0){
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(null, "OPERADOR NÃO AUTORIZADO A REALIZAR A MOVIMENTAÇÃO DE ESTOQUE", lblNomeModulo.getText());
                        return false;
                    }else{
                        UsuarioAuditar.Auditar(nCodigoUsuario, "TROCA", "TROCA AVULSA COD : " + CodigoTroca + " - MOVIMENTOU ESTOQUE" );
                    }
                }               
                
                return true;
                
                
            }
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
       return false;

    }
    private void btRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoverActionPerformed
        // TODO add your handling code here:
        RemoverItem();
       
    }//GEN-LAST:event_btRemoverActionPerformed
    private boolean AjustarSituacaoProduto(){
        try {
            if(!btSituacaoProduto.isEnabled()){
                return false;
            }
            String Situacao ="";
            ResultSet c= dbgItensDevolvidos.getTbDinnamuS().getRs();
            if(c.getRow()>0){
                int LinhaAtual = dbgItensDevolvidos.getjTable().getSelectedRow();
                c.absolute(LinhaAtual+1);
                Situacao = c.getString("nomemov");
                if(Situacao!=null){
                    if(Situacao.equalsIgnoreCase("normal")){
                        Situacao="C/DEFEITO";
                  //  }else if(Situacao.equalsIgnoreCase("c/defeito")){
                  //      Situacao="DEVOLUÇÃO";
                    }else{
                        Situacao="NORMAL";
                    }
                    c.updateObject("nomemov", Situacao);                    
                    c.updateRow();
                    dbgItensDevolvidos.getTbDinnamuS().fireTableRowsUpdated(dbgItensDevolvidos.getjTable().getSelectedRow(),dbgItensDevolvidos.getjTable().getSelectedRow());
                }
            }
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    private void btSituacaoProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSituacaoProdutoActionPerformed
        // TODO add your handling code here:
        AjustarSituacaoProduto();
    }//GEN-LAST:event_btSituacaoProdutoActionPerformed

    private void txtDataTrocaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataTrocaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataTrocaKeyPressed

    private void txtDataTrocaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataTrocaFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataTrocaFocusGained

    private void txtIDTRocaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDTRocaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDTRocaActionPerformed

    private void btFechar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFechar3ActionPerformed
        try {
           TeclaAtalho_Acoes_2(KeyEvent.VK_ESCAPE);
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }//GEN-LAST:event_btFechar3ActionPerformed

    private void btFechar3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btFechar3KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btFechar3KeyPressed
    public boolean AtualizarSeq(){
        try {
            int nSeq =1;
            
            //ResultSet lista = dbgItensDevolvidos.getTbDinnamuS().getRs();
            dbgItensDevolvidos.getTbDinnamuS().getRs().beforeFirst();
            while(dbgItensDevolvidos.getTbDinnamuS().getRs().next()){
                
                dbgItensDevolvidos.getTbDinnamuS().setValorCelular("seq", nSeq);
                
                nSeq++;
            }        
            //dbgItensDevolvidos.getTbDinnamuS().fireTableDataChanged();
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    public void ReposicionaAposExclusao(int LinhaExcluida){
        try {
            
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }
    public boolean LimparLinha(){
        try {
             //ResultSet lista = dbgItensDevolvidos.getTbDinnamuS().getRs();
             //dbgItensDevolvidos.getTbDinnamuS().setValorCelular(PontoSalvamento, lista);
             dbgItensDevolvidos.getTbDinnamuS().setValorCelular("descricao", "");
             dbgItensDevolvidos.getTbDinnamuS().setValorCelular("codprod", 0l);
             dbgItensDevolvidos.getTbDinnamuS().setValorCelular("quantidade", 0f);
             dbgItensDevolvidos.getTbDinnamuS().setValorCelular("preco", 0f);
             dbgItensDevolvidos.getTbDinnamuS().setValorCelular("total", 0f);
             //dbgItensDevolvidos.getTbDinnamuS().fireTableDataChanged();
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    public boolean RemoverItem(){
        try {
            if(!btRemover.isEnabled()){
                return false;
            }
            if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao(null, "CONFIRMA A EXCLUSÃO DO ITEM ?", "PDV TROCA")==MetodosUI_Auxiliares_1.Sim()){
                if(dbgItensDevolvidos.getRsDados().getRow()>0){
                    boolean UltimaLinha = false;
                    int LinhaAtual= dbgItensDevolvidos.getTbDinnamuS().getLinhaAtual();
                    if(LinhaAtual+1 == dbgItensDevolvidos.getTbDinnamuS().getRowCount()){
                       UltimaLinha=true; 
                    }
                    dbgItensDevolvidos.getTbDinnamuS().RemoveRow(LinhaAtual);                
                    AtualizarDbgItensDevolvidos(this.CodigoTroca);
                    if(dbgItensDevolvidos.getTbDinnamuS().getRowCount()==0){
                       NovaLinha(CodigoTroca);
                    }else{          
                        AtualizarSeq();                    
                        if(!UltimaLinha){
                            dbgItensDevolvidos.getjTable().setRowSelectionInterval(LinhaAtual, LinhaAtual);
                        }else{
                            int TotalLinha =  dbgItensDevolvidos.getTbDinnamuS().getRowCount();
                            if(TotalLinha!=0){
                                dbgItensDevolvidos.getjTable().setRowSelectionInterval(TotalLinha-1, TotalLinha-1);                            
                            }
                        }
                        LinhaAtual = dbgItensDevolvidos.getjTable().getSelectedRow();
                        dbgItensDevolvidos.getjTable().setColumnSelectionInterval(2, 2);
                    }
                    AtualizarCamposTotais();
                }
            }
            
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    
    public void TeclaAtalho_Acoes_2(int e){
        try {            
            if(e==KeyEvent.VK_ESCAPE){                                
                if(!Consultar){
                    if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao(null, "CONFIRMA A SAIDA DA TROCA?\n\nTODAS AS ALTERAÇÕES FEITAS SERÃO PERDIDAS", lblNomeModulo.getText())!=MetodosUI_Auxiliares_1.Sim()){                                      
                        return;
                    }                
                    DAO_RepositorioLocal.RollBack_Statment();    
                }
                CodigoTroca=0l;
                dispose();
             }else if(e==KeyEvent.VK_F3){                                
                 btConfirmarActionPerformed(null);
             }

            
        } catch (Exception ex) {
            LogDinnamus.Log(ex,true);
        }
    }     
   private Action ESCAPE=null,F3=null; 
    
   private boolean IniciarUI_TeclaAtalho(){            
         try {
            ESCAPE = new  AbstractAction() {
            @Override  
            public void actionPerformed(ActionEvent e) {
                
                TeclaAtalho_Acoes_2(KeyEvent.VK_ESCAPE);
            }};       
            F3 = new  AbstractAction() {
            @Override  
            public void actionPerformed(ActionEvent e) {
                
                TeclaAtalho_Acoes_2(KeyEvent.VK_F3);
            }};       
            
            TeclasDeAtalho.DefinirFuncao_A_Tecla(PainelTroca, ESCAPE, "ESCAPE"); 
            TeclasDeAtalho.DefinirFuncao_A_Tecla(PainelTroca, F3, "F3"); 
            
           
            controleteclas.SetarTodosOsBotoes(this.getContentPane());
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
         
    }
    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PainelBotoes;
    private javax.swing.JPanel PainelCorpo;
    private javax.swing.JPanel PainelDadosTroca;
    private javax.swing.JPanel PainelGrid;
    private javax.swing.JPanel PainelTopo;
    private javax.swing.JPanel PainelTotal;
    private javax.swing.JPanel PainelTotalVenda;
    private javax.swing.JPanel PainelTroca;
    private javax.swing.JButton btConfirmar;
    private javax.swing.JButton btFechar3;
    private javax.swing.JButton btRemover;
    private javax.swing.JButton btSituacaoProduto;
    private javax.swing.JComboBox cbAtendente;
    private javax.swing.JCheckBox chkMovEstoque;
    private br.com.ui.JTableDinnamuS dbgItensDevolvidos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblNomeModulo;
    private javax.swing.JLabel lblQtDevolvido;
    private javax.swing.JLabel lblSaldoDevedor;
    private javax.swing.JLabel lblTotalDevolvido;
    private javax.swing.JLabel lblValorApagar;
    private com.toedter.calendar.JDateChooser txtDataTroca;
    private javax.swing.JTextField txtIDCliente;
    private javax.swing.JTextField txtIDTRoca;
    private javax.swing.JTextField txtNomeCliente;
    private javax.swing.JTextField txtObs;
    // End of variables declaration//GEN-END:variables
}
