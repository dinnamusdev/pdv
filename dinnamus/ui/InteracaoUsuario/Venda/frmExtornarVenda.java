/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmExtornarVenda.java
 *
 * Created on 29/05/2012, 16:57:28
 */
package dinnamus.ui.InteracaoUsuario.Venda;

import br.com.ecf.ECFDinnamuS;
import br.com.info.Sistema;
import br.com.log.LogDinnamus;
import br.ui.teclas.DefinirAtalhos2;
import br.valor.formatar.FormatarNumero;
import MetodosDeNegocio.Sincronismo.SincronizarMovimento;
import MetodosDeNegocio.Seguranca.UsuarioAuditar;
import MetodosDeNegocio.Seguranca.UsuarioSistema;
import MetodosDeNegocio.Venda.GerenciarCaixa;
import dinnamus.metodosnegocio.venda.caixa.PDVComprovante;
import MetodosDeNegocio.Venda.DadosorcRN;
import MetodosDeNegocio.Venda.Venda;
import UI.Seguranca.ValidarAcessoAoProcesso;
import br.com.repositorio.DAO_RepositorioLocal;
import br.com.ui.MetodosUI_Auxiliares_1;
import br.ui.teclas.controleteclas;
import com.nfce.envio.EnviarNFCe;
import dinnamus.rel.RelatorioJasperXML;
import integracao.ui.MetodosUI_Auxiliares;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.TreeMap;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author Fernando
 */
public class frmExtornarVenda extends javax.swing.JDialog {

    /** Creates new form frmExtornarVenda */
    public int nCodigoLoja=0;
    public int nCodigoFilial=0;
    public int nCodigoPDV =0;
    public RelatorioJasperXML jasperNFce;
    
        private boolean ReimprimirUltimaVenda=false;
          
    public String ControleCX="";
    private ECFDinnamuS ecf = new ECFDinnamuS();
    private String NomeImpNaoFiscal="";
    private boolean CarregouOK = false;
    public frmExtornarVenda(java.awt.Frame parent, boolean modal, int CodigoFilial, int CodigoLoja, int CodigoPDV, String Controlecx, ECFDinnamuS ecf, String ImpNaoFiscal, RelatorioJasperXML jasperNFce) {
        super(parent, modal);
        initComponents();
        this.nCodigoFilial = CodigoFilial;
        this.nCodigoLoja= CodigoLoja;
        this.nCodigoPDV = CodigoPDV;
        this.ControleCX=Controlecx;
        this.jasperNFce=jasperNFce;
        this.ecf= ecf;
        this.setNomeImpNaoFiscal(ImpNaoFiscal);

        CarregouOK=IniciarUI();
        
        
    }
      public frmExtornarVenda(java.awt.Frame parent, boolean modal, int CodigoFilial, int CodigoLoja, int CodigoPDV, String Controlecx, ECFDinnamuS ecf, String ImpNaoFiscal, RelatorioJasperXML jasperNFce, boolean ReimprimirUltimaVenda) {
        super(parent, modal);
        initComponents();
        this.nCodigoFilial = CodigoFilial;
        this.nCodigoLoja= CodigoLoja;
        this.nCodigoPDV = CodigoPDV;
        this.ControleCX=Controlecx;
        this.jasperNFce=jasperNFce;
        this.ecf= ecf;
        this.setNomeImpNaoFiscal(ImpNaoFiscal);
        this.ReimprimirUltimaVenda=ReimprimirUltimaVenda;
        CarregouOK=IniciarUI();
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        PainelPrincipal = new javax.swing.JPanel();
        PainelBotoes = new javax.swing.JPanel();
        btExtornar = new javax.swing.JButton();
        btReimprimir = new javax.swing.JButton();
        dbgDetalhesVenda = new br.com.ui.JTableDinnamuS();
        PainelTopo = new javax.swing.JPanel();
        btFechar1 = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PESQUISAR VENDAS");
        setMinimumSize(new java.awt.Dimension(783, 476));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        PainelPrincipal.setLayout(new java.awt.GridBagLayout());

        PainelBotoes.setBackground(new java.awt.Color(0, 0, 0));
        PainelBotoes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PainelBotoes.setLayout(new java.awt.GridBagLayout());

        btExtornar.setBackground(new java.awt.Color(0, 0, 0));
        btExtornar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btExtornar.setForeground(new java.awt.Color(255, 255, 255));
        btExtornar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/delete.png"))); // NOI18N
        btExtornar.setMnemonic('E');
        btExtornar.setText("Extornar - [F3]");
        btExtornar.setBorderPainted(false);
        btExtornar.setOpaque(false);
        btExtornar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExtornarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 41;
        gridBagConstraints.ipady = 41;
        PainelBotoes.add(btExtornar, gridBagConstraints);

        btReimprimir.setBackground(new java.awt.Color(0, 0, 0));
        btReimprimir.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btReimprimir.setForeground(new java.awt.Color(255, 255, 255));
        btReimprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/impressora.png"))); // NOI18N
        btReimprimir.setMnemonic('p');
        btReimprimir.setText("Reimprimir - [F4]");
        btReimprimir.setBorderPainted(false);
        btReimprimir.setOpaque(false);
        btReimprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReimprimirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 41;
        gridBagConstraints.ipady = 41;
        PainelBotoes.add(btReimprimir, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        PainelPrincipal.add(PainelBotoes, gridBagConstraints);

        dbgDetalhesVenda.setExibirBarra(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        PainelPrincipal.add(dbgDetalhesVenda, gridBagConstraints);

        PainelTopo.setBackground(new java.awt.Color(0, 0, 0));
        PainelTopo.setLayout(new java.awt.GridBagLayout());

        btFechar1.setBackground(new java.awt.Color(0, 0, 0));
        btFechar1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btFechar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Shut down_16x16.png"))); // NOI18N
        btFechar1.setToolTipText("");
        btFechar1.setBorderPainted(false);
        btFechar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFechar1ActionPerformed(evt);
            }
        });
        btFechar1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btFechar1KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelTopo.add(btFechar1, gridBagConstraints);

        lblTitulo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTitulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Dollar.png"))); // NOI18N
        lblTitulo.setText("VENDAS EFETIVADAS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelTopo.add(lblTitulo, gridBagConstraints);

        jLabel2.setText("jLabel2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.2;
        PainelTopo.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        PainelPrincipal.add(PainelTopo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(PainelPrincipal, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btExtornarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExtornarActionPerformed
// TODO add your handling code here:
    try {
        if(ReimprimirUltimaVenda)return;
    
        //Object[] Linha = dbgDetalhesVenda.TratarLinhaSelecionada(dbgDetalhesVenda.getjTable());
        int Linha = dbgDetalhesVenda.getjTable().getSelectedRow();
        if(Linha>=0){
           Long nCodigoVenda = dbgDetalhesVenda.getTbDinnamuS().getValorCelulaLong("codigo", Linha);           
           Float nValor = dbgDetalhesVenda.getTbDinnamuS().getValorCelulaFloat("valor", Linha);
        
           if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes(null, "Confirma o extorno da venda " + nCodigoVenda.toString() + " - Valor : " + FormatarNumero.FormatarNumero( nValor.toString()) + " ?", "Extornar Venda", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)==JOptionPane.YES_OPTION){
              
              Integer nCodigoUsuario =ValidarAcessoAoProcesso.Verificar(null , UsuarioSistema.getIdUsuarioLogado(), "extornar", Sistema.getLojaAtual(), true, "Extornar Venda");    // TODO add your handling code here:
              if(nCodigoUsuario>0){  
                  ArrayList<Long> Prevenda_VendasVinculadas = Venda.Prevenda_VendasVinculadas(nCodigoVenda);
                  if(Prevenda_VendasVinculadas.size()>1){
                      
                      if(!Sistema.isOnline()){
                          br.com.ui.MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("ESTA OPERAÇÃO NÃO PODE SER REALIZADO COM O SISTEMA OFF-LINE", "EXTORNO MESCLAGEM/PREVENDA NÃO PERMITIDO");
                          return;
                      }
                      
                      int Ret =br.com.ui.MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao("A VENDA ESCOLHIDA FAZ PARTE DE UMA MESCLAGEM. ESTA OPERAÇÃO EXCLUIRÁ TODAS AS NOTAS ENVOLVIDAS\n\nDESEJA REALIZAR ESTA OPERAÇÃO ?", "ESTA VENDA É UMA MESCLAGEM");
                      if(Ret!= br.com.ui.MetodosUI_Auxiliares_1.Sim()){
                         return;
                      }
                  }
                  boolean Reaproveitar = false ;
                  if(Sistema.isOnline()){
                     if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao("Deseja reaproveitar esta venda ?", "Reaproveitar Venda")==MetodosUI_Auxiliares_1.Sim()){
                        Reaproveitar=true;
                     }
                  }
                  if(DadosorcRN.Extornar(nCodigoVenda, nCodigoLoja, nCodigoPDV, nCodigoFilial, Sistema.isOnline(),Reaproveitar )){
                      if(Sistema.isOnline()){                      
                         SincronizarMovimento.Iniciar(false, false);
                      }
                      UsuarioAuditar.Auditar(nCodigoUsuario, "VENDAS","Extornar Venda" + nCodigoVenda.toString() + " - Valor : " + nValor.toString()); 
                      MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "Venda Extornada com sucesso", "Extorno", "INFO"); 
                      Atualizar_dbgDetalhesVenda(ControleCX);
                      if(Reaproveitar){
                        if(Venda.VendaReaproveita!=null){
                           MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Foi gerado uma nova cotação com o codigo : [ " + Venda.VendaReaproveita.get(0) + " / " + Venda.VendaReaproveita.get(1) + " ]", "REAPROVEITAMENTO OK");
                        }
                      }
                      
                  }else{
                      MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "Não foi possível realizar o extorno", "Extorno", "AVISO"); 
                  }
              }else{
                   MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "Usuario não possui autorização para extorno", "Extorno", "AVISO"); 
              } 
           }
        }
    } catch (Exception e) {
        LogDinnamus.Log(e);
    }
    
    
}//GEN-LAST:event_btExtornarActionPerformed

    private void btReimprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReimprimirActionPerformed
        // TODO add your handling code here:
        try {
           Object[] Linha = dbgDetalhesVenda.TratarLinhaSelecionada(dbgDetalhesVenda.getjTable());
           boolean bNFCE=false; 
            String cRet=null;
           if(Linha!=null){
                Long nCodigoVenda = Long.parseLong(Linha[0].toString()); 
               if (ReimprimirUltimaVenda) {
                   String cQueryPesquisa = "SELECT 1 FROM off_nfce_pdv_notas WHERE codigovenda =" + nCodigoVenda;
                    ResultSet GerarResultSet = DAO_RepositorioLocal.GerarResultSet(cQueryPesquisa);
                    if(GerarResultSet!=null && GerarResultSet.next()){
                       cRet="NFce";
                    }else{
                        cRet="N.FISCAL";
                    }

               }else{
                    Float nValor = Float.parseFloat(Linha[3].toString());
                    Object[] Opcoes=new Object[] {"FISCAL","N.FISCAL","NFCe"};
                    cRet= MetodosUI_Auxiliares_1.InputBox(null, "Escolha o tipo de Comprovante", "Reimpressão", "AVISO",Opcoes,"Continuar Nota");
                    if(cRet!=null){
                        if(cRet.equalsIgnoreCase("nfce") && !Sistema.isOnline()){
                            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não será possivel reimprimir a nfce com o sistema off-line", "NFCe - Reimprimi");
                            return;                    
                        }

                    }else{
                        return;
                    }
               }
               
                PDVComprovante.Reimprimir(cRet.replace(".", ""),getEcf(),nCodigoVenda, getNomeImpNaoFiscal(),jasperNFce);
           } 
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }//GEN-LAST:event_btReimprimirActionPerformed

    private void btFechar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFechar1ActionPerformed

        dispose();
    }//GEN-LAST:event_btFechar1ActionPerformed

    private void btFechar1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btFechar1KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyChar()=='\n'){
            btFechar1ActionPerformed(null);
        }
    }//GEN-LAST:event_btFechar1KeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        if(!CarregouOK){
            this.dispose();            
        }else{
             if(ReimprimirUltimaVenda){
                lblTitulo.setText("Reimpressão");
                btExtornar.setVisible(false);
                btReimprimir.requestFocus();
            }else{
            dbgDetalhesVenda.getjTable().requestFocus();
             }
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PainelBotoes;
    private javax.swing.JPanel PainelPrincipal;
    private javax.swing.JPanel PainelTopo;
    private javax.swing.JButton btExtornar;
    private javax.swing.JButton btFechar1;
    private javax.swing.JButton btReimprimir;
    private br.com.ui.JTableDinnamuS dbgDetalhesVenda;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblTitulo;
    // End of variables declaration//GEN-END:variables
    
    private boolean IniciarUI()
    {
        try {
            controleteclas.BotaoReagirAoEnter(btReimprimir);
            
           Integer nCodigoUsuario =ValidarAcessoAoProcesso.Verificar(null , UsuarioSistema.getIdUsuarioLogado(), "PDV_CNS", Sistema.getLojaAtual(), true, "Consultar vendas efetivadas");    // TODO add your handling code here:
            if(nCodigoUsuario>0){  
            
                if(!TeclasAtalhos_UI()) {return false;}

                if(Inicializar_UI_dbgDetalhesVenda())
                {
                   return Atualizar_dbgDetalhesVenda(ControleCX);
                }
            }else{
                 MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Acesso negado", "Consultar vendas");
                 return false ;     
            }
            
           
        } catch (Exception e) {
            LogDinnamus.Log(e);
            
        }
        return false;
    }
    public void Tecla_Atalho(String Fonte){
        //boolean Ret = false;
        try {
            if(Fonte.equalsIgnoreCase("F3")){
                btExtornarActionPerformed(null);
            }else if(Fonte.equalsIgnoreCase("F4")){
                btReimprimirActionPerformed(null);
            }else if(Fonte.equalsIgnoreCase("ESCAPE")){
                btFechar1ActionPerformed(null);
            }else if(Fonte.equalsIgnoreCase("F5")){
               // btReaproveitarVendaActionPerformed(null);
            }            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
       // return Ret;
    }
      private boolean TeclasAtalhos_UI(){
        try {  
             AbstractAction TeclaAtalhos  = new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                       String Fonte = e.getSource().toString();                
                       Tecla_Atalho(Fonte);                      
                }
            };            
             
            String Teclas[] ={"F3","F4","F5","ESCAPE"};  
            DefinirAtalhos2.Definir(PainelPrincipal, Teclas, TeclaAtalhos);
            //DefinirAtalhos.Definir(PainelCorpo, TeclaAtalhos);
            return true;
       } catch (Exception e) {
           LogDinnamus.Log(e, true);
           return false;
       }
   }
    private boolean  Inicializar_UI_dbgDetalhesVenda(){
    
        try {
            
           dbgDetalhesVenda.getTbDinnamuS().setModeloUsandoColecao(true);
            TreeMap<String, ImageIcon> imagens = new TreeMap<String, ImageIcon>();
            imagens.put("OK", new ImageIcon(getClass().getResource("/dinnamus/ui/img/Yes.png")));
            imagens.put("PEND", new ImageIcon(getClass().getResource("/dinnamus/ui/img/No-entry.png")));
               
            dbgDetalhesVenda.addClColunas("codigo", "Codigo", 80);
            dbgDetalhesVenda.addClColunas("seq", "Seq", 80);
            dbgDetalhesVenda.addClColunas("mesclagem", "Mesclagem", 80);
            dbgDetalhesVenda.addClColunas("valor", "Valor", 80, true,false,SwingConstants.RIGHT);
            dbgDetalhesVenda.addClColunas("data", "Data", 100);
            dbgDetalhesVenda.addClColunas("hora", "Hora", 80);            
            dbgDetalhesVenda.addClColunas("cod_vend", "Cod.Vend", 50);
            dbgDetalhesVenda.addClColunas("vendedor", "Vend", 130);
            dbgDetalhesVenda.addClColunas("cliente", "Cliente", 150);                      
            dbgDetalhesVenda.getjTable().setFont(new Font("Courier New", Font.BOLD, 14));
            //dbgDetalhesVenda.sett
            dbgDetalhesVenda.FormatoDataAdicionar("data", new SimpleDateFormat("dd/MM/yyyy"));
            dbgDetalhesVenda.FormatoDataAdicionar("hora", new SimpleDateFormat("HH:mm:ss"));
            dbgDetalhesVenda.getjTable().addKeyListener(new KeyListener() {
               @Override
               public void keyTyped(KeyEvent e) {
                   //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public void keyPressed(KeyEvent e) {
                   if(e.getKeyChar()=='\n'){
                      btReimprimirActionPerformed(null);
                   }
                   //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public void keyReleased(KeyEvent e) {
                  // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }
           });
            
            return true;
        } catch (Exception e) {
            
            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, e.getMessage(), "Grid de Detalhes", "AVISO");
            return false;
        }
    }
    private boolean  Atualizar_dbgDetalhesVenda(String cControleCX){
    
        try {

            //HashMap<String, NumberFormat> hashMapData = new HashMap<String, NumberFormat>();
            //hashMapData.put("VALOR", (FormatarNumero.getNf().getCurrencyInstance()));
            //dbgVendedores.setNumberFormat(hashMapData);
            //Codigo,sequencia,id,codvendedor,Vendedor,Data,Cliente,Valor
            //dbgVendedores.setTamColunas(new int[]{40,40,40,40,100,50,100,50});
            //HashMap<String, DefaultTableCellRenderer> hmalinhamento = new HashMap<String, DefaultTableCellRenderer>();
            //DefaultTableCellRenderer alinhamento=new DefaultTableCellRenderer();
            //alinhamento.setHorizontalAlignment(SwingConstants.RIGHT);
            //hmalinhamento.put("VALOR", alinhamento);
            //dbgVendedores.setAlinhamentos(hmalinhamento);
            ResultSet rs =GerenciarCaixa.Caixa_MovimentoDetalhado(cControleCX,true, ReimprimirUltimaVenda);
            
            dbgDetalhesVenda.setRsDados(rs);
            if(rs.getRow()>0){
                dbgDetalhesVenda.getjTable().setRowSelectionInterval(0, 0);
            }
            
            return true;
        } catch (Exception e) {
            
            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, e.getMessage(), "Grid de Detalhes", "AVISO");
            return false;
        }
    }

    /**
     * @return the ecf
     */
    public ECFDinnamuS getEcf() {
        return ecf;
    }

    /**
     * @param ecf the ecf to set
     */
    public void setEcf(ECFDinnamuS ecf) {
        this.ecf = ecf;
    }

    /**
     * @return the NomeImpNaoFiscal
     */
    public String getNomeImpNaoFiscal() {
        return NomeImpNaoFiscal;
    }

    /**
     * @param NomeImpNaoFiscal the NomeImpNaoFiscal to set
     */
    public void setNomeImpNaoFiscal(String NomeImpNaoFiscal) {
        this.NomeImpNaoFiscal = NomeImpNaoFiscal;
    }
}
