/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dinnamus.ui.InteracaoUsuario.nfce;

import MetodosDeNegocio.Seguranca.UsuarioSistema;
import MetodosDeNegocio.Sincronismo.SincronizarMovimento;
import MetodosDeNegocio.Venda.pdvgerenciar;
import UI.Seguranca.ValidarAcessoAoProcesso;
import br.TratamentoNulo.TratamentoNulos;
import br.com.info.Sistema;
import br.com.log.LogDinnamus;
import br.com.ui.MetodosUI_Auxiliares_1;
import br.data.DataHora;
import br.manipulararquivos.ManipulacaoArquivo2;
import br.ui.teclas.DefinirAtalhos2;
import br.ui.teclas.controleteclas;
import br.valor.formatar.FormatarNumero;
import com.fincatto.nfe310.classes.NFAmbiente;
import com.fincatto.nfe310.classes.NFUnidadeFederativa;
import com.nfce.cancelamento.NFCe_Cancelamento;
import com.nfce.config.NFCE_Configurar;
import com.nfce.config.NFCE_Contingencia;
import com.nfce.consultar.NFCE_ConsultarNota;
import com.nfce.envio.EnviarNFCe;
import com.nfce.envio.NFCe_ConfiguracaoAmbiente;
import com.nfce.xml.NFCE_Xml;
import dinnamus.metodosnegocio.licencas.Licenca;
import dinnamus.ui.InteracaoUsuario.nfce.danfe.GerarDanfeNFCE;
import dinnamus.rel.RelatorioJasperXML;
import dinnamus.rel.nfce.DanfeNFCe;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.TreeMap;
import javax.print.PrintService;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import org.jdesktop.swingx.JXTaskPane;

/**
 *
 * @author Fernando
 */
public class frmNFCE_Listagem extends javax.swing.JDialog {

    /**
     * Creates new form frmNFCE_Listagem
     */
    private boolean IniciarOK = false;
    private DanfeNFCe danfeNFce; 
    public frmNFCE_Listagem(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
       
        MetodosUI_Auxiliares_1.MaximizarJanelaDeDialogo(this);
        setLocationRelativeTo(null);
        //PainelBusca.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        PainelPrincipal = new javax.swing.JPanel();
        PainelTitulo = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        btFechar1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        PainelLegenda = new javax.swing.JPanel();
        PainelStatus = new javax.swing.JPanel();
        lblNaoEnviada = new javax.swing.JLabel();
        lblEnviada = new javax.swing.JLabel();
        lblNaoEnviad = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        PainelTipoEmissao = new javax.swing.JPanel();
        lblNFCe_Pulou1 = new javax.swing.JLabel();
        lblNFCe_Contingencia1 = new javax.swing.JLabel();
        lblNFCeNormal1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        PainelCorpo = new javax.swing.JScrollPane();
        dbgNotas = new br.com.ui.JTableDinnamuS();
        PainelEsquerdo = new javax.swing.JScrollPane();
        jXTPMenu = new org.jdesktop.swingx.JXTaskPaneContainer();
        jxBotoes = new org.jdesktop.swingx.JXTaskPane();
        PainelBotoes = new javax.swing.JPanel();
        btImprimir = new javax.swing.JButton();
        btEnviarTodas = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        btExportarXML = new javax.swing.JButton();
        btConsulta = new javax.swing.JButton();
        btNaoEnviar = new javax.swing.JButton();
        btExibitDanfe = new javax.swing.JButton();
        btGerarXml = new javax.swing.JButton();
        btImprimirDanfe = new javax.swing.JButton();
        jXtpPesquisar = new org.jdesktop.swingx.JXTaskPane();
        cbBusca = new javax.swing.JComboBox();
        txtProcurar = new javax.swing.JFormattedTextField();
        btPesquisar = new javax.swing.JButton();
        btLimpar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        txtDataInicial = new com.toedter.calendar.JDateChooser();
        txtDataFinal = new com.toedter.calendar.JDateChooser();
        btFiltarData = new javax.swing.JButton();
        jXtpRepositorio = new org.jdesktop.swingx.JXTaskPane();
        opLocal = new javax.swing.JRadioButton();
        opServidor = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        PainelPrincipal.setBackground(new java.awt.Color(0, 0, 0));
        PainelPrincipal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        PainelPrincipal.setLayout(new java.awt.GridBagLayout());

        PainelTitulo.setBackground(new java.awt.Color(0, 0, 0));
        PainelTitulo.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), null));
        PainelTitulo.setLayout(new java.awt.GridBagLayout());

        lblTitulo.setBackground(new java.awt.Color(255, 255, 204));
        lblTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfce-xs.png"))); // NOI18N
        lblTitulo.setText("PESQUISA DE NFC-E");
        lblTitulo.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        PainelTitulo.add(lblTitulo, gridBagConstraints);

        btFechar1.setBackground(new java.awt.Color(0, 0, 0));
        btFechar1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btFechar1.setForeground(new java.awt.Color(255, 255, 255));
        btFechar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Shut down_16x16.png"))); // NOI18N
        btFechar1.setMnemonic('F');
        btFechar1.setText("FECHAR");
        btFechar1.setBorderPainted(false);
        btFechar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFechar1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 10);
        PainelTitulo.add(btFechar1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.1;
        PainelTitulo.add(jLabel5, gridBagConstraints);

        jLabel4.setBackground(new java.awt.Color(255, 255, 204));
        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/barra logo dinnamus.JPG"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        PainelTitulo.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        PainelPrincipal.add(PainelTitulo, gridBagConstraints);

        PainelLegenda.setBackground(new java.awt.Color(0, 0, 0));
        PainelLegenda.setLayout(new java.awt.GridBagLayout());

        PainelStatus.setBackground(new java.awt.Color(0, 0, 0));
        PainelStatus.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        PainelStatus.setForeground(new java.awt.Color(255, 255, 255));
        PainelStatus.setLayout(new java.awt.GridBagLayout());

        lblNaoEnviada.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblNaoEnviada.setForeground(new java.awt.Color(255, 255, 255));
        lblNaoEnviada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfc-offline_nao_env.png"))); // NOI18N
        lblNaoEnviada.setText("Cancelado Envio");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        PainelStatus.add(lblNaoEnviada, gridBagConstraints);

        lblEnviada.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblEnviada.setForeground(new java.awt.Color(255, 255, 255));
        lblEnviada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/OK.png"))); // NOI18N
        lblEnviada.setText("Enviada  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        PainelStatus.add(lblEnviada, gridBagConstraints);

        lblNaoEnviad.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblNaoEnviad.setForeground(new java.awt.Color(255, 255, 255));
        lblNaoEnviad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/No-entry.png"))); // NOI18N
        lblNaoEnviad.setText("Não Enviada ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        PainelStatus.add(lblNaoEnviad, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Status NFC-e");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        PainelStatus.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        PainelLegenda.add(PainelStatus, gridBagConstraints);

        PainelTipoEmissao.setBackground(new java.awt.Color(0, 0, 0));
        PainelTipoEmissao.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        PainelTipoEmissao.setLayout(new java.awt.GridBagLayout());

        lblNFCe_Pulou1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblNFCe_Pulou1.setForeground(new java.awt.Color(255, 255, 255));
        lblNFCe_Pulou1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Raise.png"))); // NOI18N
        lblNFCe_Pulou1.setText("NFCe - Pulou Seq. ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        PainelTipoEmissao.add(lblNFCe_Pulou1, gridBagConstraints);

        lblNFCe_Contingencia1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblNFCe_Contingencia1.setForeground(new java.awt.Color(255, 255, 255));
        lblNFCe_Contingencia1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfc-offline.png"))); // NOI18N
        lblNFCe_Contingencia1.setText("Contingência ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        PainelTipoEmissao.add(lblNFCe_Contingencia1, gridBagConstraints);

        lblNFCeNormal1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblNFCeNormal1.setForeground(new java.awt.Color(255, 255, 255));
        lblNFCeNormal1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfce-xs.png"))); // NOI18N
        lblNFCeNormal1.setText(" Normal ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        PainelTipoEmissao.add(lblNFCeNormal1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Tipo de Emissão");
        jLabel2.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        PainelTipoEmissao.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        PainelLegenda.add(PainelTipoEmissao, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        PainelPrincipal.add(PainelLegenda, gridBagConstraints);

        jSplitPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSplitPane1PropertyChange(evt);
            }
        });

        PainelCorpo.setViewportView(dbgNotas);

        jSplitPane1.setRightComponent(PainelCorpo);

        PainelEsquerdo.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                PainelEsquerdoComponentResized(evt);
            }
        });

        jXTPMenu.setBackground(new java.awt.Color(0, 0, 0));

        jxBotoes.setCollapsed(true);
        jxBotoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/gear.png"))); // NOI18N
        jxBotoes.setSpecial(true);
        jxBotoes.setTitle("Funções");
        jxBotoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jxBotoesMouseClicked(evt);
            }
        });
        org.jdesktop.swingx.VerticalLayout verticalLayout5 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout5.setGap(10);
        jxBotoes.getContentPane().setLayout(verticalLayout5);

        PainelBotoes.setBackground(new java.awt.Color(0, 0, 0));
        PainelBotoes.setOpaque(false);
        org.jdesktop.swingx.VerticalLayout verticalLayout6 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout6.setGap(5);
        PainelBotoes.setLayout(verticalLayout6);

        btImprimir.setBackground(new java.awt.Color(0, 0, 0));
        btImprimir.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btImprimir.setForeground(new java.awt.Color(255, 255, 255));
        btImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Sum.png"))); // NOI18N
        btImprimir.setText("Resumo  - [F5]");
        btImprimir.setBorderPainted(false);
        btImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImprimirActionPerformed(evt);
            }
        });
        PainelBotoes.add(btImprimir);

        btEnviarTodas.setBackground(new java.awt.Color(0, 0, 0));
        btEnviarTodas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btEnviarTodas.setForeground(new java.awt.Color(255, 255, 255));
        btEnviarTodas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfc-offline.png"))); // NOI18N
        btEnviarTodas.setText("Enviar  - [F6]");
        btEnviarTodas.setBorderPainted(false);
        btEnviarTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviarTodasActionPerformed(evt);
            }
        });
        PainelBotoes.add(btEnviarTodas);

        btCancelar.setBackground(new java.awt.Color(0, 0, 0));
        btCancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Erase.png"))); // NOI18N
        btCancelar.setText("Cancelar - [F3]");
        btCancelar.setBorderPainted(false);
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });
        PainelBotoes.add(btCancelar);

        btExportarXML.setBackground(new java.awt.Color(0, 0, 0));
        btExportarXML.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btExportarXML.setForeground(new java.awt.Color(255, 255, 255));
        btExportarXML.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Download.png"))); // NOI18N
        btExportarXML.setText("Exporta XML´s  - [F7]");
        btExportarXML.setBorderPainted(false);
        btExportarXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExportarXMLActionPerformed(evt);
            }
        });
        PainelBotoes.add(btExportarXML);

        btConsulta.setBackground(new java.awt.Color(0, 0, 0));
        btConsulta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btConsulta.setForeground(new java.awt.Color(255, 255, 255));
        btConsulta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/View.png"))); // NOI18N
        btConsulta.setText("Consulta - [F4]");
        btConsulta.setBorderPainted(false);
        btConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultaActionPerformed(evt);
            }
        });
        PainelBotoes.add(btConsulta);

        btNaoEnviar.setBackground(new java.awt.Color(0, 0, 0));
        btNaoEnviar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btNaoEnviar.setForeground(new java.awt.Color(255, 255, 255));
        btNaoEnviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfc-offline_nao_env.png"))); // NOI18N
        btNaoEnviar.setText("Não Enviar - [F9]");
        btNaoEnviar.setToolTipText("");
        btNaoEnviar.setBorderPainted(false);
        btNaoEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNaoEnviarActionPerformed(evt);
            }
        });
        PainelBotoes.add(btNaoEnviar);

        btExibitDanfe.setBackground(new java.awt.Color(0, 0, 0));
        btExibitDanfe.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btExibitDanfe.setForeground(new java.awt.Color(255, 255, 255));
        btExibitDanfe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/qrcode_1.png"))); // NOI18N
        btExibitDanfe.setText("Exibir Danfe - [F10]");
        btExibitDanfe.setBorderPainted(false);
        btExibitDanfe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExibitDanfeActionPerformed(evt);
            }
        });
        PainelBotoes.add(btExibitDanfe);

        btGerarXml.setBackground(new java.awt.Color(0, 0, 0));
        btGerarXml.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btGerarXml.setForeground(new java.awt.Color(255, 255, 255));
        btGerarXml.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/icons8-Código-25.png"))); // NOI18N
        btGerarXml.setText("Gerar Xml- [F11]");
        btGerarXml.setBorderPainted(false);
        btGerarXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGerarXmlActionPerformed(evt);
            }
        });
        PainelBotoes.add(btGerarXml);

        btImprimirDanfe.setBackground(new java.awt.Color(0, 0, 0));
        btImprimirDanfe.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btImprimirDanfe.setForeground(new java.awt.Color(255, 255, 255));
        btImprimirDanfe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/impressoraFiscal.png"))); // NOI18N
        btImprimirDanfe.setText("Imprimir Danfe - [F12]");
        btImprimirDanfe.setBorderPainted(false);
        btImprimirDanfe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImprimirDanfeActionPerformed(evt);
            }
        });
        PainelBotoes.add(btImprimirDanfe);

        jxBotoes.getContentPane().add(PainelBotoes);

        jXTPMenu.add(jxBotoes);

        jXtpPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Find.png"))); // NOI18N
        jXtpPesquisar.setSpecial(true);
        jXtpPesquisar.setTitle("Pesquisar NFC-e");
        jXtpPesquisar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXtpPesquisarMouseClicked(evt);
            }
        });
        org.jdesktop.swingx.VerticalLayout verticalLayout4 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout4.setGap(20);
        jXtpPesquisar.getContentPane().setLayout(verticalLayout4);

        cbBusca.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Codigo Venda", "Numero Nota" }));
        cbBusca.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbBuscaItemStateChanged(evt);
            }
        });
        jXtpPesquisar.getContentPane().add(cbBusca);

        txtProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProcurarActionPerformed(evt);
            }
        });
        txtProcurar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtProcurarFocusGained(evt);
            }
        });
        txtProcurar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtProcurarKeyPressed(evt);
            }
        });
        jXtpPesquisar.getContentPane().add(txtProcurar);

        btPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/magnifier--plus.png"))); // NOI18N
        btPesquisar.setText("Localizar");
        btPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisarActionPerformed(evt);
            }
        });
        jXtpPesquisar.getContentPane().add(btPesquisar);

        btLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/magnifier--minus.png"))); // NOI18N
        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });
        jXtpPesquisar.getContentPane().add(btLimpar);
        jXtpPesquisar.getContentPane().add(jSeparator1);

        txtDataInicial.setBorder(javax.swing.BorderFactory.createTitledBorder("Data inicial"));
        jXtpPesquisar.getContentPane().add(txtDataInicial);

        txtDataFinal.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Final"));
        jXtpPesquisar.getContentPane().add(txtDataFinal);

        btFiltarData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/magnifier--plus.png"))); // NOI18N
        btFiltarData.setText("Filtrar");
        btFiltarData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFiltarDataActionPerformed(evt);
            }
        });
        jXtpPesquisar.getContentPane().add(btFiltarData);

        jXTPMenu.add(jXtpPesquisar);

        jXtpRepositorio.setCollapsed(true);
        jXtpRepositorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/redeonline.png"))); // NOI18N
        jXtpRepositorio.setSpecial(true);
        jXtpRepositorio.setTitle("Repositorio Atual");
        jXtpRepositorio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXtpRepositorioMouseClicked(evt);
            }
        });
        org.jdesktop.swingx.VerticalLayout verticalLayout2 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout2.setGap(20);
        jXtpRepositorio.getContentPane().setLayout(verticalLayout2);

        buttonGroup1.add(opLocal);
        opLocal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        opLocal.setSelected(true);
        opLocal.setText("LOCAL");
        opLocal.setOpaque(false);
        opLocal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                opLocalItemStateChanged(evt);
            }
        });
        jXtpRepositorio.getContentPane().add(opLocal);

        buttonGroup1.add(opServidor);
        opServidor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        opServidor.setText("SERVIDOR");
        opServidor.setOpaque(false);
        opServidor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                opServidorItemStateChanged(evt);
            }
        });
        jXtpRepositorio.getContentPane().add(opServidor);

        jXTPMenu.add(jXtpRepositorio);

        PainelEsquerdo.setViewportView(jXTPMenu);

        jSplitPane1.setLeftComponent(PainelEsquerdo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        PainelPrincipal.add(jSplitPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(PainelPrincipal, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
      private void Funcoes(String Fonte)  {
      
          
          try {
              if(!btImprimir.isEnabled()){
                  return;
              }
              if(Fonte.equalsIgnoreCase("ESCAPE")){
                  btFechar1ActionPerformed(null);
              }else if(Fonte.equalsIgnoreCase("F3")){
                  btCancelarActionPerformed(null);
              }else if(Fonte.equalsIgnoreCase("F4")){
                  btConsultaActionPerformed(null);
              }else if(Fonte.equalsIgnoreCase("F5")){                  
                  btImprimirActionPerformed(null);
                  
              }else if(Fonte.equalsIgnoreCase("F6")){
                  EnviarTodasNotaContingencia();
              }else if(Fonte.equalsIgnoreCase("F7")){
                       btExportarXMLActionPerformed(null);
              
              }else if(Fonte.equalsIgnoreCase("F9")){
                       btNaoEnviarActionPerformed(null);
              }else if(Fonte.equalsIgnoreCase("F10")){
                      btExibitDanfeActionPerformed(null);
              }else if(Fonte.equalsIgnoreCase("F11")){
                      btGerarXmlActionPerformed(null);
              }else if(Fonte.equalsIgnoreCase("F12")){
                      btImprimirDanfeActionPerformed(null);
              }
              
          } catch (Exception e) {
              LogDinnamus.Log(e, true);
          }
          
      }
      private boolean IniciarUI_TeclaAtalho(){
        try {
         
            AbstractAction TeclaAtalhos  = new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                        String Fonte = e.getSource().toString();                
                        Funcoes(Fonte);
                }
            };      
            

            String Teclas[] ={"F3","F4","F5","F6","F7","F9","F10","F11","F12","ESCAPE"};
            
            DefinirAtalhos2.Definir(PainelPrincipal, Teclas, TeclaAtalhos);
            
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }   
    private void btFechar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFechar1ActionPerformed
        // TODO add your handling code here:
     
        this.dispose();
    }//GEN-LAST:event_btFechar1ActionPerformed
    private boolean IniciarUI(){
        boolean Ret = false;
        try {
           /* 
            Integer nCodigoUsuario = ValidarAcessoAoProcesso.Verificar(null, UsuarioSistema.getIdUsuarioLogado(), "PDV_NFCELIST", Sistema.getLojaAtual(), true, "Listagem NFC-e");
            if (nCodigoUsuario == 0) {
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Usuário não possui permissão de acesso a este módulo", "Acesso não autorizado");
                return false;
            }
            */
            IniciarUI_TeclaAtalho();
         
            
             txtDataInicial.setDate(new Date());
            txtDataFinal.setDate(txtDataInicial.getDate());
         
            if(!IniciarUI_Dbg()){return false;}
            
            if(!IniciarUI_Dbg_Atualizar()){ return false;}
            int pdv = pdvgerenciar.CodigoPDV();
            dbgNotas.getjTable().requestFocus();
           // if(NFCe_ConfiguracaoAmbiente.getConfig()==null){
                if(!NFCe_ConfiguracaoAmbiente.Configurar(Sistema.getLojaAtual(),pdv , Licenca.DataServidor())){
                    MetodosUI_Auxiliares_1.BloquearDesbloquearComponentes(PainelBotoes, false);
                }
            //}
            
            //controleteclas.TRocarTabPorEnter();
            controleteclas.SetarTodosOsBotoes(PainelBotoes);
            controleteclas.BotaoReagirAoEnter(btPesquisar);
            controleteclas.BotaoReagirAoEnter(btLimpar);
            danfeNFce = new DanfeNFCe();     
           
            Ret = true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean IniciarUI_Dbg(){
        boolean Ret = false;
        try {
            TreeMap<String, ImageIcon> imagens = new TreeMap<String, ImageIcon>();
            imagens.put("1", new ImageIcon(getClass().getResource("/dinnamus/ui/img/Yes.png")));       
            
            
            TreeMap<String, ImageIcon> imagens_status = new TreeMap<String, ImageIcon>();
            imagens_status.put("ENVIADA", new ImageIcon(getClass().getResource("/dinnamus/ui/img/OK.png")));            
            imagens_status.put("PENDENTE", new ImageIcon(getClass().getResource("/dinnamus/ui/img/No-entry.png")));            
            imagens_status.put("ENVIO CANC.", new ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfc-offline_nao_env.png")));            
            
            
            TreeMap<String, ImageIcon> tipo_emissao = new TreeMap<String, ImageIcon>();           
            tipo_emissao.put("PULOU", new ImageIcon(getClass().getResource("/dinnamus/ui/img/Raise.png")));            
            tipo_emissao.put("NORMAL", new ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfce-xs.png")));            
            tipo_emissao.put("CONTINGÊNCIA", new ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfc-offline.png")));            
             
            //10
            dbgNotas.addClColunas("status_nfce", "Status", 7,true,false, imagens_status,"" ); 
            dbgNotas.addClColunas("nome_emissao", "Tp.Emis", 7,true,false, tipo_emissao,"");            
            dbgNotas.addClColunas("codigovenda", "Cod_Venda", 12);
            dbgNotas.addClColunas("numero", "Numero", 8);
            dbgNotas.addClColunas("serie", "Serie", 4);
            dbgNotas.addClColunas("versao", "Versão", 4);
            dbgNotas.addClColunas("emissao", "Data Emissão", 11);            
            dbgNotas.addClColunas("datahoraautorizacao", "Dt.Autoriz.", 12);            
            dbgNotas.addClColunas("numeroprotocolo", "Protocolo", 10);     
            dbgNotas.addClColunas("nome_ambiente", "Ambiente", 4);  
            dbgNotas.addClColunas("cancelada", "Cancel.", 6,true,false, imagens,"" );           
            dbgNotas.addClColunas("inutilizada", "Inutil.", 4,true,false, imagens,"" );   
             dbgNotas.addClColunas("valorvenda", "Valor", 6 );   
            HashMap<String, NumberFormat> numberFormat =  new HashMap<>();
            numberFormat.put("valorvenda", NumberFormat.getCurrencyInstance());
            //dbgNotas.addClColunas("chave", "Chave de Acesso", 22);            
            
            dbgNotas.AumentaAlturaLinhas(3f);
            
            
            dbgNotas.setColunaComTamanhosEmPercentual(true);            
            dbgNotas.getTbDinnamuS().setModeloUsandoColecao(true);
            dbgNotas.getjTable().setFont(new Font("Courier New", Font.PLAIN, 9  ));
            dbgNotas.addDateFormat("emissao", dbgNotas.DateFormat_ddmmyy_hhmmss);
            dbgNotas.addDateFormat("datahoraautorizacao", dbgNotas.DateFormat_ddmmyy_hhmmss);
            Ret=true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
 private boolean IniciarUI_Dbg_Atualizar(){
        boolean Ret = false;
        try {
            boolean online = opServidor.isSelected();
            //java.util.Date dataAtual = new Date();
            dbgNotas.setRsDados(NFCE_Configurar.NotasEnviadas( (online ?  0 :  pdvgerenciar.CodigoPDV()) , online,txtDataInicial.getDate(),txtDataFinal.getDate()));
            
            Ret=true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
     private boolean EnviarNotaContingencia(){
        boolean Ret = false;
        try {
            if(!btImprimir.isEnabled()) {return false;}
            
            int Linha = dbgNotas.getjTable().getSelectedRow();
            if(Linha>=0){
                Long Cancelada = dbgNotas.getTbDinnamuS().getValorCelulaLong("cancelada", Linha);
                
                if(!NFCE_Configurar.NFCE_Configuracao_OK(Sistema.getLojaAtual(),pdvgerenciar.CodigoPDV() ,NFCE_Configurar.NFCE_MODELO)){
                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O sistema de emissão de NFC-e está DESATIVADA" , "NFC-e - Envio NÃO DISPONÍVEL");   
                  return false;
                }
                
                if(NFCE_Contingencia.Contingencia(pdvgerenciar.CodigoPDV())){
                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O sistema de emissão de NFC-e está CONTINGÊNCIA" , "NFC-e - Envio NÃO DISPONÍVEL");   
                  return false;
                }
                
                String statusnfce = dbgNotas.getTbDinnamuS().getValorCelulaString("status_nfce", Linha);
                if(!statusnfce.equalsIgnoreCase("pendente")){
                   MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("A NFC-e já foi enviada" , "NFC-e : Envio NÃO REALIZADO");   
                   return false;
                }
                if(Cancelada==1){
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O sistema de emissão de NFC-e está cancelada" , "NFC-e - Envio NÃO REALIZADO"); 
                }else{
                    Long CodigoVenda = dbgNotas.getTbDinnamuS().getValorCelulaLong("codigovenda", Linha);
                    Ret = EnviarContingencia_Acao(CodigoVenda);                    
                }
            }
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;    
    }
    
    private boolean EnviarTodasNotaContingencia(){
        boolean Ret = false;
        try {
            if(!btEnviarTodas.isEnabled()) {return false;}
                
            
                if(!NFCE_Configurar.NFCE_Configuracao_OK(Sistema.getLojaAtual(),pdvgerenciar.CodigoPDV(),NFCE_Configurar.NFCE_MODELO)){
                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O sistema de emissão de NFC-e está DESATIVADA" , "NFC-e - Envio NÃO DISPONÍVEL");   
                  return false;
                }
                
                if(NFCE_Contingencia.Contingencia(pdvgerenciar.CodigoPDV())){
                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O sistema de emissão de NFC-e está CONTINGÊNCIA" , "NFC-e - Envio NÃO DISPONÍVEL");   
                  return false;
                }
                
                if(opServidor.isSelected()){
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Esta funcão não esta disponível quando o repositório atual é o servidor" , "Funcão não Disponível");   
                  return false;
                }
                
                int PDV = pdvgerenciar.CodigoPDV();
                int Loja = Sistema.getLojaAtual();
                int TotalContingencia = NFCE_Contingencia.NFCE_TotalEmContingencia(PDV);
                if(TotalContingencia>0){
                    if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao("Existem [" + TotalContingencia + "] nota(s) em contingência pendente(s) de envio\n\nCONFIRMA O ENVIO DA(S) NFC-E ?", "NFC-e em Contingência")==MetodosUI_Auxiliares_1.Sim()){
                        Ret = EnviarTodasAsContingencia_Acao(NFUnidadeFederativa.PA_NFCe, Loja,PDV); 
                       
                    }
                }else{
                      MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não existem NFC-e em CONTINGÊNCIA para transmitir" , "NFC-e");   
                }
              
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;    
    }
    
    private boolean CancelarEnvio(){
        boolean Ret = false;
        try {
           int Linha = dbgNotas.getjTable().getSelectedRow();
            if(Linha>=0){
                Long Cancelada = dbgNotas.getTbDinnamuS().getValorCelulaLong("cancelada", Linha);
                
                if(!NFCE_Configurar.NFCE_Configuracao_OK(Sistema.getLojaAtual(),pdvgerenciar.CodigoPDV(),NFCE_Configurar.NFCE_MODELO)){
                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O sistema de emissão de NFC-e está DESATIVADA" , "NFC-e - Cancelar Envio NÃO DISPONÍVEL");   
                  return false;
                }
                
                String statusnfce = dbgNotas.getTbDinnamuS().getValorCelulaString("status_nfce", Linha);
                String numero = dbgNotas.getTbDinnamuS().getValorCelulaString("numero", Linha);
                String serie = dbgNotas.getTbDinnamuS().getValorCelulaString("serie", Linha);
                String numeroprotocolo = dbgNotas.getTbDinnamuS().getValorCelulaString("numeroprotocolo", Linha);
                if(statusnfce.equalsIgnoreCase("enviada")){
                    //if(numeroprotocolo)
                   MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Este procedimento não pode ser realizado em NFC-e enviadas" , "NFC-e - Cancelar Envio NÃO REALIZADO");   
                   return false;
                }else if(statusnfce.equalsIgnoreCase("ENVIO CANC.")){
                    //if(numeroprotocolo)
                   MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Esta NFC-e já teve seu envio cancelado anteriormente" , "NFC-e - Cancelar Envio NÃO REALIZADO");   
                   return false;
                }
                if (opServidor.isSelected()) {
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Esta funcão não esta disponível quando o repositório atual é o servidor", "Funcão não Disponível");
                    return false;
                }
                
                if(Cancelada==1){
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Este procedimento não pode ser realizado em NFC-e canceladas" , "NFC-e - Cancelar Envio NÃO REALIZADO"); 
                }else{
                   if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao("Confirma o cancelamento do envio ? \n\nNumero : "+ numero + "\nSerie :" + serie, "NFC-e Cancelamento do Envio")==MetodosUI_Auxiliares_1.Sim()){ 
                    //Long CodigoVenda = dbgNotas.getTbDinnamuS().getValorCelulaLong("codigovenda", Linha);
                    Long Id = dbgNotas.getTbDinnamuS().getValorCelulaLong("id", Linha);
                    //String Chave = dbgNotas.getTbDinnamuS().getValorCelulaString("chave", Linha);
                    CancelarEnvio_Acao(Id);                            
                   }
                }
            }            
       
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;    
    }
            
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
         if(!IniciarUI()){
            dispose();
        
        }
        
        
    }//GEN-LAST:event_formWindowOpened
    private void Bloquear_Desbloq(boolean status){
       MetodosUI_Auxiliares_1.BloquearDesbloquearComponentes(PainelPrincipal, status);     
       dbgNotas.getjTable().setEnabled(status);
       
    }
    
      private void ConsultarNFCe_Acao(final String Chave,final NFUnidadeFederativa uf){
     
          Bloquear_Desbloq(false);
          new Thread("frmNFCE_Listagem_ConsultarNFCe_Acao") {
              public void run() {
                  try {
                      NFCE_ConsultarNota consulta = new NFCE_ConsultarNota();
                      if(consulta!=null){
                        if (consulta.Consultar(Chave, uf)) {
                            int nPosicaoGrid = dbgNotas.getjTable().getSelectedRow();
                            IniciarUI_Dbg_Atualizar();
                            dbgNotas.getjTable().setRowSelectionInterval(nPosicaoGrid, nPosicaoGrid);
                            
                            String MSG="";
                            if(consulta.getRetorno().getProtocolo()!=null){
                                MSG =
                                      "Chave      : " + consulta.getRetorno().getChave() + "\n"
                                    + "Ambiente   : " + consulta.getRetorno().getAmbiente().toString() + "\n"
                                    + "UF         : " + consulta.getRetorno().getUf() + "\n"                                      
                                    + "Motivo     : " +  consulta.getRetorno().getMotivo() + "\n"
                                    + "Status     : " + consulta.getRetorno().getStatus() + "\n"
                                    + (consulta.getRetorno().getProtocolo()!=null ?
                                     "Protocolo  : " + consulta.getRetorno().getProtocolo().getProtocoloInfo().getNumeroProtocolo() + "\n"
                                    + "Autorizada : " + consulta.getRetorno().getProtocolo().getProtocoloInfo().getDataRecebimento().toString()
                                    :"");

                                
                            }else{
                                 MSG =
                                      "Chave      : " + consulta.getRetorno().getChave() + "\n"
                                    + "Ambiente   : " + consulta.getRetorno().getAmbiente().toString() + "\n"
                                    + "UF         : " + consulta.getRetorno().getUf() + "\n"
                                    + "Motivo     : " + consulta.getRetorno().getMotivo() + "\n"
                                    + "Status     : " + consulta.getRetorno().getStatus() ;

                            }
                            MetodosUI_Auxiliares_1.MensagemAoOperadorTextual("NFC-e : Consulta Nota", "Retorno Sefaz", MSG, "INFO", new Font("Courier New", Font.PLAIN, 14));

                        }
                      }else{
                          MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possivel realizar a consulta", "NFC-e Consultar");
                      }
                      Bloquear_Desbloq(true);
                  } catch (Exception e) {
                      LogDinnamus.Log(e, true);
                  }
              }
          }.start();
        
    }
private boolean EnviarContingencia_Acao(final Long CodigoVenda){
     
        boolean Ret = false;
        try {
            Bloquear_Desbloq(false);
            new Thread("FrmNFCE_EnviarContingencia_Acao") {
                @Override
                public void run() { 
                  
                    try {
                        
                        EnviarNFCe nfce = new EnviarNFCe();

                        boolean RetCanc = nfce.EnviarNFE_ViaXML(CodigoVenda);

                        String MSG = nfce.getMsgErro();
                        if(RetCanc){
                            IniciarUI_Dbg_Atualizar();
                            if(nfce.getProtocolo()!=null){
                                if(nfce.getProtocolo().size()>0){
                                    MSG = "Protocolo Nro: " + nfce.getProtocolo().get(0).getProtocoloInfo().getNumeroProtocolo() + "\n" +
                                          "Autorizado em: " + nfce.getProtocolo().get(0).getProtocoloInfo().getDataRecebimento().toString()+"\n"+
                                          "Motivo       : " + nfce.getProtocolo().get(0).getProtocoloInfo().getMotivo() + "("+  nfce.getProtocolo().get(0).getProtocoloInfo().getStatus() +")";
                                }
                            }
                            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesINFO(MSG , "NFC-e Contingencia - Envio OK");


                        }else{
                           if(!MSG.equalsIgnoreCase("")){
                              MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(MSG , "NFC-e Contingencia - Envio NÃO REALIZADO"); 
                           }
                        }
                        nfce=null;
                        Bloquear_Desbloq(true);
                        
                        
                    } catch (Exception e) {
                        LogDinnamus.Log(e, true);
                    }
                  
                      
                }
            }.start();
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
        
    }      
    private boolean EnviarTodasAsContingencia_Acao(final NFUnidadeFederativa uf ,final int Loja,final int PDV){
     
        boolean Ret = false;
        try {
            Bloquear_Desbloq(false);
            new Thread("FrmNFCE_EnviarTodasAsContingencia_Acao") {
                @Override
                public void run() { 
                    EnviarNFCe nfce = new EnviarNFCe();
                    try {
                        ArrayList<String> retEnviarTodasASContingencias = nfce.EnviarTodasASContingencias(uf,Loja,PDV);
                        if(retEnviarTodasASContingencias!=null){
                            String Ret="";
                            for (int i = 0; i < retEnviarTodasASContingencias.size(); i++) {
                                Ret = Ret + retEnviarTodasASContingencias.get(i);
                            }
                            if (Sistema.isOnline()) {
                                SincronizarMovimento.SincronizarNFCE();
                            }
                            MetodosUI_Auxiliares_1.MensagemAoOperadorTextual("NFC-e : Envio das Contingências", "Retorno do Envio", Ret, "INFO", new Font("Courier New", Font.PLAIN, 14));
                        }else{
                            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível realizar o envio", "NFCe - Envio NÃO REALIZADO ");
                        }
                        IniciarUI_Dbg_Atualizar();
                        Bloquear_Desbloq(true);                        
                        
                    } catch (Exception e) {
                        LogDinnamus.Log(e, true);
                    }finally{
                    
                    }
                  
                      
                }
            }.start();
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
        
    }
    private void ConsultarNFCe(){
        
        try {
            
            int Linha = dbgNotas.getjTable().getSelectedRow();
            if(Linha>=0){ 
                if(!NFCE_Configurar.NFCE_Configuracao_OK(Sistema.getLojaAtual(),pdvgerenciar.CodigoPDV(),NFCE_Configurar.NFCE_MODELO)){
                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O sistema de emissão de NFC-e está DESATIVADA" , "NFC-e - Consulta NÃO DISPONÍVEL");   
                  return ;
                }
                if(NFCE_Contingencia.Contingencia(pdvgerenciar.CodigoPDV())){
                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O sistema de emissão de NFC-e está CONTINGÊNCIA" , "NFC-e - Consulta NÃO DISPONÍVEL");   
                  return ;
                }
                 String statusnfce = dbgNotas.getTbDinnamuS().getValorCelulaString("status_nfce", Linha);
                if(statusnfce.equalsIgnoreCase("ENVIO CANC.")){
                    //if(numeroprotocolo)
                   MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Esta NFC-e já teve seu envio cancelado" , "NFC-e - CONSULTA NÃO REALIZADA");   
                   return ;
                }
                //String statusnfce = dbgNotas.getTbDinnamuS().getValorCelulaString("status_nfce", Linha);
                //if(statusnfce.equalsIgnoreCase("pendente")){
                //   MetodosUI_Auxiliares.MensagemAoUsuarioSimplesAVISO("A NFC-e selecionada está em contingência e ainda não foi enviada." , "NFC-e - Consulta NÃO REALIZADA");   
                   //return ;
                //}
                
                if (opServidor.isSelected()) {
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Esta funcão não esta disponível quando o repositório atual é o servidor", "Funcão não Disponível");
                    return ;
                }
                String versao = dbgNotas.getTbDinnamuS().getValorCelulaString("versao", Linha);   
                int codigopdv = pdvgerenciar.CodigoPDV();
                    String versaoAmbiente = NFCe_ConfiguracaoAmbiente.getVersaoNFCe(codigopdv);
                    if(!versaoAmbiente.equalsIgnoreCase(versao)){
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("A versão configurada no ambiente ["+ versaoAmbiente +"] é diferente da versão da nfce ["+ versao +"] ", "Operação não permitida - Versão divergente");
                        return ;
                    }
                
                if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao("Confirma a consulta da nfce ?", "NFC-e Consultar")==MetodosUI_Auxiliares_1.Sim()){
                    String Chave = dbgNotas.getTbDinnamuS().getValorCelulaString("chave", Linha);
                    String Ambiente = dbgNotas.getTbDinnamuS().getValorCelulaString("ambiente", Linha);  
                                   
                    NFAmbiente AmbienteNota = NFAmbiente.valueOfCodigo(Ambiente);
                    NFAmbiente AmbienteTrabalho = NFCE_Configurar.getAmbienteTrabalho(pdvgerenciar.CodigoPDV(),NFCE_Configurar.NFCE_MODELO);
                    if(AmbienteTrabalho.getCodigo().equalsIgnoreCase(AmbienteNota.getCodigo())){                        
                        ConsultarNFCe_Acao(Chave,versao.equalsIgnoreCase("3.10") ? NFUnidadeFederativa.PA_NFCe : NFUnidadeFederativa.PA_NFCe4 );                
                    }else{
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O PDV esta configurado para o ambiente de " + AmbienteTrabalho.name() + "\nA nota selecionada foi enviada em: " + AmbienteNota.toString()+"\n\nAJUSTE AS CONFIGURAÇÕES DO PDV PARA CONSULTAR ESTA NFC-E", "NFC-e - Ambiente de trabalho divergente");
                    }                    
                }
            }
            
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        
    }
    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        // TODO add your handling code here:
        if(btCancelar.isEnabled()){
            CancelarNota();
        }
       
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultaActionPerformed
        // TODO add your handling code here:
        if(btConsulta.isEnabled()){
            ConsultarNFCe();
        }
    }//GEN-LAST:event_btConsultaActionPerformed

    private void btEnviarTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviarTodasActionPerformed
        // TODO add your handling code here:
        EnviarTodasNotaContingencia();
    }//GEN-LAST:event_btEnviarTodasActionPerformed

    private void btImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImprimirActionPerformed
       //GerarRelatorio();
        new frmNFCe_RelatorioParametros(null, true).setVisible(true);
        
    }//GEN-LAST:event_btImprimirActionPerformed
   
    private void btExportarXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportarXMLActionPerformed
        // TODO add your handling code here:
         new frmNFCe_ExportarXmlParametros(null, true).setVisible(true);
    }//GEN-LAST:event_btExportarXMLActionPerformed

    private void btNaoEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNaoEnviarActionPerformed
        // TODO add your handling code here:
         if(btNaoEnviar.isEnabled()){
            CancelarEnvio();
        }
       
    }//GEN-LAST:event_btNaoEnviarActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        // TODO add your handling code here:
        
        Pesquisar("Limpar");
    }//GEN-LAST:event_btLimparActionPerformed

    private void txtProcurarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProcurarKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            btPesquisar.requestFocus();
        }
    }//GEN-LAST:event_txtProcurarKeyPressed

    private void txtProcurarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtProcurarFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_txtProcurarFocusGained

    private void txtProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProcurarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProcurarActionPerformed

    private void btPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisarActionPerformed
        // TODO add your handling code here:
        //String CampoBusca = ;
        Pesquisar(cbBusca.getSelectedItem().toString());
    }//GEN-LAST:event_btPesquisarActionPerformed

    private void cbBuscaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbBuscaItemStateChanged
        // TODO add your handling code here:
        try {
            String campobusca= cbBusca.getSelectedItem().toString();
            txtProcurar.setFormatterFactory(null);
            txtProcurar.setText("");
            if(campobusca.equalsIgnoreCase("Chave de Acesso")){

                txtProcurar.setFormatterFactory(
                    new javax.swing.text.DefaultFormatterFactory(
                        new javax.swing.text.MaskFormatter("####-####-####-####-####-####-####-####-####-####-####")));
            }
            txtProcurar.requestFocus();
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }//GEN-LAST:event_cbBuscaItemStateChanged

    private void opServidorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_opServidorItemStateChanged
        // TODO add your handling code here:
         try {
            if (!Sistema.isOnline() && opServidor.isSelected()) {
               
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO( "Não será possível acessar o servidor\n\nSISTEMA OFF-LINE", "Sistema OFF-LINE");                
                opLocal.setSelected(true); 
            }else{     
                if(opServidor.isSelected()){
                   // opLocal.setSelected(true);
                    IniciarUI_Dbg_Atualizar();
                }
            }
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }//GEN-LAST:event_opServidorItemStateChanged

    private void opLocalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_opLocalItemStateChanged
        // TODO add your handling code here:
         IniciarUI_Dbg_Atualizar();
    }//GEN-LAST:event_opLocalItemStateChanged

    private void jxBotoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jxBotoesMouseClicked
        // TODO add your handling code here:
         SimularAcordion((JXTaskPane) evt.getSource());
        
    }//GEN-LAST:event_jxBotoesMouseClicked

    private void jXtpPesquisarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXtpPesquisarMouseClicked
        // TODO add your handling code here:
          SimularAcordion((JXTaskPane) evt.getSource());
    }//GEN-LAST:event_jXtpPesquisarMouseClicked

    private void jXtpRepositorioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXtpRepositorioMouseClicked
        // TODO add your handling code here:
          SimularAcordion((JXTaskPane) evt.getSource());
    }//GEN-LAST:event_jXtpRepositorioMouseClicked

    private void btExibitDanfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExibitDanfeActionPerformed
        // TODO add your handling code here:4
        
        
        gerarDanfe();
        
        
    }//GEN-LAST:event_btExibitDanfeActionPerformed

    private void btGerarXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGerarXmlActionPerformed
       
       try {
           int Linha = dbgNotas.getjTable().getSelectedRow();
           if (Linha >= 0) {
              Long CodigoVenda = dbgNotas.getTbDinnamuS().getValorCelulaLong("codigovenda", Linha);
           
             String Caminho = MetodosUI_Auxiliares_1.ListarDiretorio(null, ManipulacaoArquivo2.DiretorioDeTrabalho(),"Selecione o local para gravar o arquivo");
           
             if(Caminho!=null && !Caminho.equalsIgnoreCase("")){
                 new NFCE_Xml().ExportarXml(CodigoVenda, Caminho, opServidor.isSelected());
             }
           }


       } catch (Exception e) {
           LogDinnamus.Log(e, true);
       }
      
        
       
    }//GEN-LAST:event_btGerarXmlActionPerformed

    private void btImprimirDanfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImprimirDanfeActionPerformed
        // TODO add your handling code here:
        imprimirDanfe();
        
    }//GEN-LAST:event_btImprimirDanfeActionPerformed

    private void PainelEsquerdoComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_PainelEsquerdoComponentResized
        // TODO add your handling code here:
       
    }//GEN-LAST:event_PainelEsquerdoComponentResized

    private void jSplitPane1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSplitPane1PropertyChange
        // TODO add your handling code here:
        if(evt!=null && evt.getPropertyName().equalsIgnoreCase("dividerLocation")){
            dbgNotas.AjustarColunas();
        }
           
    }//GEN-LAST:event_jSplitPane1PropertyChange

    private void btFiltarDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFiltarDataActionPerformed
        // TODO add your handling code here:
        Filtrar();
    }//GEN-LAST:event_btFiltarDataActionPerformed
     
    private boolean imprimirDanfe(){
        boolean Ret = false;
        try {
            
           int Linha = dbgNotas.getjTable().getSelectedRow();
           if (Linha >= 0) {

               if (danfeNFce.getJasperNFce().IsIniciado()) {
                   Long CodigoVenda = dbgNotas.getTbDinnamuS().getValorCelulaLong("codigovenda", Linha);

                    String versaoNfce = dbgNotas.getTbDinnamuS().getValorCelulaString("versao", Linha);
                    //String versaoAmbiente = NFCe_ConfiguracaoAmbiente.getVersaoNFCe(pdvgerenciar.CodigoPDV());
                   if(versaoNfce.contains("4.")){                       
                      PrinterJob pj = PrinterJob.getPrinterJob();
                      if (pj.printDialog()) {                            
                           PrintService printService = pj.getPrintService();                            
                           if(printService!=null){
                              new GerarDanfeNFCE().Imprimir_NfceDanfe_Avulso( CodigoVenda, danfeNFce.getJasperNFce(), opServidor.isSelected(),PrinterJob.getPrinterJob().getPrintService());
                           }
                      } 
                   }else{
                          MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Opção disponível apenas para notas emitidas apartir da versão 4.00", "Impressão não disponível");
                   }
               } else {
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O relatório solicitado não está disponível. \nAguarde alguns instantes e tente novamente ", "Relatório não disponível");
               }
           }

            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        } 
        return Ret;
    }
   private boolean gerarDanfe(){
       boolean Ret = false;
       try {

 
           int Linha = dbgNotas.getjTable().getSelectedRow();
           if (Linha >= 0) {

               if (danfeNFce.getJasperNFce().IsIniciado()) {
                   String versaoNfce = dbgNotas.getTbDinnamuS().getValorCelulaString("versao", Linha);
                    //String versaoAmbiente = NFCe_ConfiguracaoAmbiente.getVersaoNFCe(pdvgerenciar.CodigoPDV());
                   if(versaoNfce.contains("4.")){
                        final Long CodigoVenda = dbgNotas.getTbDinnamuS().getValorCelulaLong("codigovenda", Linha);
                        Bloquear_Desbloq(false);
                        new Thread("FrmNFCE_Listagem_gerarDanfe") {
                            @Override
                            public void run() {
                                    new GerarDanfeNFCE().Exibir_NfceDanfe(CodigoVenda, danfeNFce.getJasperNFce(), "Danfe NFC-e  - Codigo venda : " + CodigoVenda, opServidor.isSelected());
                                    Bloquear_Desbloq(true);
                            }
                        }.start();
                   }else{
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Opção disponível apenas para notas emitidas apartir da versão 4.00", "Relatório não disponível");
                   }

               
               } else {
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O relatório solicitado não está disponível. \nAguarde alguns instantes e tente novamente ", "Relatório não disponível");
               }
           }


       } catch (Exception e) {
           LogDinnamus.Log(e, true);
       }
       return Ret;
   } 
    private boolean SimularAcordion(JXTaskPane pane ){
        boolean Ret = false;
        String Nome = pane.getTitle();
        try {
            if (!pane.isCollapsed()) {
                Component[] components = jXTPMenu.getComponents();
                for (int i = 0; i < components.length; i++) {
                    Component c = components[i];
                    if (c instanceof JXTaskPane) {
                        JXTaskPane pane1 = (JXTaskPane) c;
                        if (!pane1.getTitle().equalsIgnoreCase(Nome)) {
                            pane1.setCollapsed(true);
                        }
                    }
                }
            }

        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean Pesquisar(String CampoBusca){
        boolean Ret = false;
        try {
            //Codigo Venda, Chave de Acesso, Numero Nota
            String TextoBusca = txtProcurar.getText();
            if (TextoBusca.trim().length() > 0) {
                int pdv = opLocal.isSelected() ?  pdvgerenciar.CodigoPDV() : 0;
                if (CampoBusca.equalsIgnoreCase("Codigo Venda")) {
                    Long CodigoVenda = FormatarNumero.FormatarNumeroLong(TextoBusca);
                    if (CodigoVenda != null) {
                        dbgNotas.setRsDados(NFCE_Configurar.NotasEnviadas(pdv , "", CodigoVenda, "",opServidor.isSelected()));
                    } else {
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Informação digitada inválida", "Campo Inválido");
                    }
                } else if (CampoBusca.equalsIgnoreCase("Chave de Acesso")) {
                        dbgNotas.setRsDados(NFCE_Configurar.NotasEnviadas(pdv, TextoBusca, 0L, "",opServidor.isSelected()));
                } else if (CampoBusca.equalsIgnoreCase("Numero Nota")) {
                    dbgNotas.setRsDados(NFCE_Configurar.NotasEnviadas(pdv, "", 0L, TextoBusca,opServidor.isSelected()));
                }else{
                    IniciarUI_Dbg_Atualizar();
                  
                   // dbgNotas.setRsDados(NFCE_Configurar.NotasEnviadas(pdv,opServidor.isSelected())) ;
                    txtProcurar.setText("");
                } 
                
            }
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean Filtrar(){
        boolean Ret = false;
        try {
            
               if (!DataHora.IsDateValid("dd/MM/yyyy", txtDataInicial.getDate())) {
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Data inicial Inválida", "Parâmetro inválido");
                txtDataInicial.getDateEditor().getUiComponent().requestFocus();
                return false;
            }
            if (!DataHora.IsDateValid("dd/MM/yyyy", txtDataInicial.getDate())) {
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Data final Inválida", "Parâmetro inválido");
                txtDataInicial.getDateEditor().getUiComponent().requestFocus();
                return false;
            }
            
            //Codigo Venda, Chave de Acesso, Numero Nota
            
         boolean online = opServidor.isSelected();
            
            dbgNotas.setRsDados(NFCE_Configurar.NotasEnviadas(  pdvgerenciar.CodigoPDV(),online,txtDataInicial.getDate(),txtDataFinal.getDate()));            
            
            
            
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean CancelarNota_Acao(final Long CodigoVenda,final  String Motivo,final  int Loja, final  int PDV , final NFUnidadeFederativa  uf){
        boolean Ret = false;
        try {
            Bloquear_Desbloq(false);
            new Thread("FrmNFCE_Listagem_btCancelarActionPerformed") {
                @Override
                public void run() {
                    NFCe_Cancelamento canc = new NFCe_Cancelamento();
                    boolean RetCanc = canc.Cancelar(CodigoVenda, Motivo, Loja , PDV,uf);
                    String MSG = canc.getMSGRetorno();
                    if(RetCanc){
                        if(Sistema.isOnline()){
                            SincronizarMovimento.SincronizarNFCE();
                        }                        
                        IniciarUI_Dbg_Atualizar();
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesINFO(MSG , "NFC-e - Cancelamento OK");                        
                    }else{
                         IniciarUI_Dbg_Atualizar();
                       if(!MSG.equalsIgnoreCase("")){
                          MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(MSG , "NFC-e - Cancelamento NÃO REALIZADO"); 
                       }
                    }
                    canc=null;
                    Bloquear_Desbloq(true);
                }
            }.start();
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean CancelarEnvio_Acao(final Long ID){
        boolean Ret = false;
        try {
            Bloquear_Desbloq(false);
            new Thread("FrmNFCE_Listagem_btNaoEnviarActionPerformed") {
                @Override
                public void run() {
                    NFCe_Cancelamento canc = new NFCe_Cancelamento();
                    boolean RetCanc = canc.CancelarEnvio(ID);                     
                    if(RetCanc){
                        if(Sistema.isOnline()){
                            SincronizarMovimento.SincronizarNFCE();
                        }                        
                        IniciarUI_Dbg_Atualizar();
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesINFO("A NFC-e teve o seu envio cancelado" , "NFC-e - Cancelamento de Envio OK");                        
                    }else{                        
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível realizar o cancelamento do envio" , "NFC-e - Cancelamento do Envio NÃO REALIZADO");                       
                    }
                    canc=null;
                    Bloquear_Desbloq(true);
                }
            }.start();
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean CancelarNota(){
        boolean Ret = false;
        try {
            
           

            
            int Linha = dbgNotas.getjTable().getSelectedRow();
            if(Linha>=0){
                Long Cancelada = dbgNotas.getTbDinnamuS().getValorCelulaLong("cancelada", Linha);
                
                if(!NFCE_Configurar.NFCE_Configuracao_OK(Sistema.getLojaAtual(),pdvgerenciar.CodigoPDV(),NFCE_Configurar.NFCE_MODELO)){
                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O sistema de emissão de NFC-e está DESATIVADA" , "NFC-e - Cancelamento NÃO DISPONÍVEL");   
                  return false;
                }
                if(NFCE_Contingencia.Contingencia(pdvgerenciar.CodigoPDV())){
                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O sistema de emissão de NFC-e está CONTINGÊNCIA" , "NFC-e - Cancelamento NÃO DISPONÍVEL");   
                  return false;
                }
                
                String statusnfce = dbgNotas.getTbDinnamuS().getValorCelulaString("status_nfce", Linha);
                String versaonfce = dbgNotas.getTbDinnamuS().getValorCelulaString("versao", Linha);
                
                if(statusnfce.equalsIgnoreCase("pendente")){
                   MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("A NFC-e está em contingência e ainda não foi enviada.\n\nRealize o envio da NFCe e posteriormente o cancelamento" , "NFC-e - Cancelamento NÃO REALIZADO");   
                   return false;
                }else if(statusnfce.equalsIgnoreCase("ENVIO CANC.")){
                    //if(numeroprotocolo)
                   MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Esta NFC-e já teve seu envio cancelado anteriormente" , "NFC-e - CANCELAMENTO NÃO REALIZADO");   
                   return false;
                }
                if(Cancelada==1){
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("A NFC-e ja foi está cancelada anteriormente" , "NFC-e - Cancelamento NÃO REALIZADO"); 
                }else{
                    
                    if (opServidor.isSelected()) {
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Esta funcão não esta disponível quando o repositório atual é o servidor", "Funcão não Disponível");
                        return false;
                    }
                    int codigopdv = pdvgerenciar.CodigoPDV();
                    String versaoAmbiente = NFCe_ConfiguracaoAmbiente.getVersaoNFCe(codigopdv);
                    if(!versaoAmbiente.equalsIgnoreCase(versaonfce)){
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("A versão configurada no ambiente ["+ versaoAmbiente +"] é diferente da versão da nfce ["+ versaonfce +"] ", "Operação não permitida - Versão divergente");
                        return false;
                    }
                    
                    Long CodigoVenda = dbgNotas.getTbDinnamuS().getValorCelulaLong("codigovenda", Linha);
                    Long Id = dbgNotas.getTbDinnamuS().getValorCelulaLong("id", Linha);
                    String Chave = dbgNotas.getTbDinnamuS().getValorCelulaString("chave", Linha);
                    String Motivo="";
                    Motivo= MetodosUI_Auxiliares_1.InputBox(null, "Motivo do Cancelamento(15-256 Caracteres)", "NFC-e Cancelamento", "INFO");
                    Motivo = TratamentoNulos.getTratarString().Tratar(Motivo, "").trim();
                    if(Motivo.length()>=15 && Motivo.length()<=256){
                        if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao("Confirma o cancelamento da nfce abaixo ? \n\nChave de Acesso : "+Chave+"\nMOTIVO : "+ Motivo , "NFC-e Cancelamento")==MetodosUI_Auxiliares_1.Sim()){
                          CancelarNota_Acao(Id, Motivo, Sistema.getLojaAtual() , pdvgerenciar.CodigoPDV(), NFCe_ConfiguracaoAmbiente.getConfig().getCUF());                            
                        }
                    }else  if(Motivo.length()!=0 ){
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Motivo do Cancelamento precisa ter entre 15-256 Caracteres" , "NFC-e - Motivo inválid"); 
                    }
                }
            }            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;    
    }
    
    /**
     * @param args the command line arguments
     */
  
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PainelBotoes;
    private javax.swing.JScrollPane PainelCorpo;
    private javax.swing.JScrollPane PainelEsquerdo;
    private javax.swing.JPanel PainelLegenda;
    private javax.swing.JPanel PainelPrincipal;
    private javax.swing.JPanel PainelStatus;
    private javax.swing.JPanel PainelTipoEmissao;
    private javax.swing.JPanel PainelTitulo;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btConsulta;
    private javax.swing.JButton btEnviarTodas;
    private javax.swing.JButton btExibitDanfe;
    private javax.swing.JButton btExportarXML;
    private javax.swing.JButton btFechar1;
    private javax.swing.JButton btFiltarData;
    private javax.swing.JButton btGerarXml;
    private javax.swing.JButton btImprimir;
    private javax.swing.JButton btImprimirDanfe;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btNaoEnviar;
    private javax.swing.JButton btPesquisar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbBusca;
    private br.com.ui.JTableDinnamuS dbgNotas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private org.jdesktop.swingx.JXTaskPaneContainer jXTPMenu;
    private org.jdesktop.swingx.JXTaskPane jXtpPesquisar;
    private org.jdesktop.swingx.JXTaskPane jXtpRepositorio;
    private org.jdesktop.swingx.JXTaskPane jxBotoes;
    private javax.swing.JLabel lblEnviada;
    private javax.swing.JLabel lblNFCeNormal1;
    private javax.swing.JLabel lblNFCe_Contingencia1;
    private javax.swing.JLabel lblNFCe_Pulou1;
    private javax.swing.JLabel lblNaoEnviad;
    private javax.swing.JLabel lblNaoEnviada;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JRadioButton opLocal;
    private javax.swing.JRadioButton opServidor;
    private com.toedter.calendar.JDateChooser txtDataFinal;
    private com.toedter.calendar.JDateChooser txtDataInicial;
    private javax.swing.JFormattedTextField txtProcurar;
    // End of variables declaration//GEN-END:variables
}
