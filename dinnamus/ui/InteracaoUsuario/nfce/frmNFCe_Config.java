/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dinnamus.ui.InteracaoUsuario.nfce;

import MetodosDeNegocio.Seguranca.UsuarioSistema;
import MetodosDeNegocio.Venda.pdvgerenciar;
import UI.Seguranca.ValidarAcessoAoProcesso;
import br.String.ManipulacaoString;
import br.TratamentoNulo.TratamentoNulos;
import br.com.info.Sistema;
import br.com.log.LogDinnamus;
import br.com.ui.MetodosUI_Auxiliares_1;
import br.data.DataHora;
import br.manipulararquivos.ManipulacaoArquivo2;
import com.nfce.certificado.NFCeCertificadoA1;
import com.nfce.config.NFCEConfiguracao;
import com.nfce.config.NFCE_Configurar;
import dinnamus.metodosnegocio.licencas.Licenca;
import java.io.File;
import java.sql.ResultSet;
import java.util.Date;
import java.util.HashMap;
import javax.swing.ImageIcon;


/**
 *
 * @author Fernando
 */
public class frmNFCe_Config extends javax.swing.JDialog {

    /**
     * Creates new form frmNFCe_Config
     */
    private NFCEConfiguracao config =null;
    
    private NFCEConfiguracao configNFE =null;
    private String NomeArqCertificado ="";
    private String NomeArqCadeiaCertificado ="";
    private boolean CarregouOK=false;
    public frmNFCe_Config(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        //MetodosUI_Auxiliares.CentrarJDialog(this, this.getToolkit());
        setLocationRelativeTo(null);        
        config=new NFCEConfiguracao();
        configNFE=new NFCEConfiguracao();
        CarregouOK=CarregarUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        chkNFEValidada = new javax.swing.JCheckBox();
        chkNFeAtivada = new javax.swing.JCheckBox();
        chkNFCeAtivada = new javax.swing.JCheckBox();
        PainelPrincipal = new javax.swing.JPanel();
        PainelTitulo = new javax.swing.JPanel();
        btFechar1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        PainelInternoGe = new javax.swing.JLabel();
        PainelCorpo = new javax.swing.JPanel();
        PainelBotoes = new javax.swing.JPanel();
        btAtualizarDadosPDV = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        PainelInterno = new javax.swing.JPanel();
        PainelStatus = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        chkNFCEValidada = new javax.swing.JCheckBox();
        btConfigurarNFCe = new javax.swing.JButton();
        btConfigurarNFE = new javax.swing.JButton();
        tpPrincipal = new javax.swing.JTabbedPane();
        PainelInternoGeral = new javax.swing.JPanel();
        PainelInternoGeral_Conteudo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCertificado = new javax.swing.JTextField();
        btCarregarCertificado = new javax.swing.JButton();
        PainelDadosCertificado = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDadosCertificado = new javax.swing.JTextArea();
        PainelValidade = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtValidadeFinal = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtValidadeInicial = new javax.swing.JTextField();
        lblStatusCertificado = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        PainelDadosCertificado1 = new javax.swing.JPanel();
        txtCadeiaCertificado = new javax.swing.JTextField();
        btCarregarCadeiaCertificado = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtCertificadoSenha = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        btValidarCertificado = new javax.swing.JButton();
        PainelDadosCertificado2 = new javax.swing.JPanel();
        txtCSC = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtIDToken = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        PainelDadosURLConsulta = new javax.swing.JPanel();
        txtURLProducaoConsulta = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtURLHomologacaoConsulta = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        PainelDadosURLQrCode = new javax.swing.JPanel();
        txtURLProducaoQRCode = new javax.swing.JTextField();
        txtURLHomologacaoQRCode = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        btDesbloquearCamposAvancados = new javax.swing.JButton();

        chkNFEValidada.setBackground(new java.awt.Color(255, 255, 204));
        chkNFEValidada.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chkNFEValidada.setText("NFe VALIDADA");
        chkNFEValidada.setEnabled(false);
        chkNFEValidada.setFocusable(false);

        chkNFeAtivada.setBackground(new java.awt.Color(255, 255, 255));
        chkNFeAtivada.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chkNFeAtivada.setText("NFe ATIVADA");
        chkNFeAtivada.setEnabled(false);
        chkNFeAtivada.setFocusable(false);
        chkNFeAtivada.setOpaque(false);

        chkNFCeAtivada.setBackground(new java.awt.Color(255, 255, 255));
        chkNFCeAtivada.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chkNFCeAtivada.setText("NFCe ATIVADA");
        chkNFCeAtivada.setEnabled(false);
        chkNFCeAtivada.setFocusable(false);
        chkNFCeAtivada.setOpaque(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(790, 576));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(790, 576));
        setResizable(false);
        setSize(new java.awt.Dimension(790, 576));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        PainelPrincipal.setMinimumSize(new java.awt.Dimension(714, 540));
        PainelPrincipal.setPreferredSize(new java.awt.Dimension(714, 540));
        PainelPrincipal.setLayout(new java.awt.GridBagLayout());

        PainelTitulo.setBackground(new java.awt.Color(0, 0, 0));
        PainelTitulo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        PainelTitulo.setLayout(new java.awt.GridBagLayout());

        btFechar1.setBackground(new java.awt.Color(0, 0, 0));
        btFechar1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btFechar1.setForeground(new java.awt.Color(255, 255, 255));
        btFechar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Shut down_16x16.png"))); // NOI18N
        btFechar1.setMnemonic('F');
        btFechar1.setText("FECHAR");
        btFechar1.setBorderPainted(false);
        btFechar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFechar1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        PainelTitulo.add(btFechar1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        PainelTitulo.add(jLabel5, gridBagConstraints);

        PainelInternoGe.setBackground(new java.awt.Color(0, 0, 0));
        PainelInternoGe.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        PainelInternoGe.setForeground(new java.awt.Color(255, 255, 255));
        PainelInternoGe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfce-xs.png"))); // NOI18N
        PainelInternoGe.setText("Configuração");
        PainelInternoGe.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        PainelTitulo.add(PainelInternoGe, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        PainelPrincipal.add(PainelTitulo, gridBagConstraints);

        PainelCorpo.setBackground(new java.awt.Color(255, 255, 204));
        PainelCorpo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        PainelCorpo.setPreferredSize(new java.awt.Dimension(714, 540));
        PainelCorpo.setLayout(new java.awt.GridBagLayout());

        PainelBotoes.setBackground(new java.awt.Color(0, 0, 0));
        PainelBotoes.setLayout(new java.awt.GridBagLayout());

        btAtualizarDadosPDV.setBackground(new java.awt.Color(0, 0, 0));
        btAtualizarDadosPDV.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btAtualizarDadosPDV.setForeground(new java.awt.Color(255, 255, 255));
        btAtualizarDadosPDV.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Yes.png"))); // NOI18N
        btAtualizarDadosPDV.setMnemonic('G');
        btAtualizarDadosPDV.setText("Gravar Configuração");
        btAtualizarDadosPDV.setBorderPainted(false);
        btAtualizarDadosPDV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizarDadosPDVActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 313, 8, 313);
        PainelBotoes.add(btAtualizarDadosPDV, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        PainelCorpo.add(PainelBotoes, gridBagConstraints);

        PainelInterno.setBackground(new java.awt.Color(255, 255, 255));
        PainelInterno.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PainelInterno.setLayout(new java.awt.GridBagLayout());

        PainelStatus.setBackground(new java.awt.Color(255, 255, 204));
        PainelStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PainelStatus.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setEnabled(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        chkNFCEValidada.setBackground(new java.awt.Color(255, 255, 204));
        chkNFCEValidada.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chkNFCEValidada.setText("CONFIG. VALIDADA");
        chkNFCEValidada.setEnabled(false);
        chkNFCEValidada.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(chkNFCEValidada, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 0.4;
        PainelStatus.add(jPanel1, gridBagConstraints);

        btConfigurarNFCe.setBackground(new java.awt.Color(0, 0, 0));
        btConfigurarNFCe.setForeground(new java.awt.Color(255, 255, 255));
        btConfigurarNFCe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/InteracaoUsuario/nfce/logo-nfce-xs.png"))); // NOI18N
        btConfigurarNFCe.setText("Configurar NFC-e");
        btConfigurarNFCe.setBorderPainted(false);
        btConfigurarNFCe.setEnabled(false);
        btConfigurarNFCe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfigurarNFCeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        PainelStatus.add(btConfigurarNFCe, gridBagConstraints);

        btConfigurarNFE.setBackground(new java.awt.Color(0, 0, 0));
        btConfigurarNFE.setForeground(new java.awt.Color(255, 255, 255));
        btConfigurarNFE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/icons8-código-de-barras-32.png"))); // NOI18N
        btConfigurarNFE.setText("Configurar NF-e");
        btConfigurarNFE.setBorderPainted(false);
        btConfigurarNFE.setEnabled(false);
        btConfigurarNFE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfigurarNFEActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        PainelStatus.add(btConfigurarNFE, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 0, 0, 0);
        PainelInterno.add(PainelStatus, gridBagConstraints);

        tpPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        tpPrincipal.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        PainelInternoGeral.setBackground(new java.awt.Color(255, 255, 255));
        PainelInternoGeral.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PainelInternoGeral.setLayout(new java.awt.GridBagLayout());

        PainelInternoGeral_Conteudo.setBackground(new java.awt.Color(255, 255, 255));
        PainelInternoGeral_Conteudo.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("[2] Senha do Certificado Digital");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelInternoGeral_Conteudo.add(jLabel1, gridBagConstraints);

        txtCertificado.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.3;
        PainelInternoGeral_Conteudo.add(txtCertificado, gridBagConstraints);

        btCarregarCertificado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btCarregarCertificado.setText("Carregar");
        btCarregarCertificado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCarregarCertificadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelInternoGeral_Conteudo.add(btCarregarCertificado, gridBagConstraints);

        PainelDadosCertificado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PainelDadosCertificado.setLayout(new java.awt.GridBagLayout());

        taDadosCertificado.setEditable(false);
        taDadosCertificado.setBackground(new java.awt.Color(212, 208, 200));
        taDadosCertificado.setColumns(20);
        taDadosCertificado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        taDadosCertificado.setRows(5);
        jScrollPane1.setViewportView(taDadosCertificado);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.3;
        PainelDadosCertificado.add(jScrollPane1, gridBagConstraints);

        PainelValidade.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PainelValidade.setOpaque(false);
        PainelValidade.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("  Certificado Válido de : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        PainelValidade.add(jLabel3, gridBagConstraints);

        txtValidadeFinal.setEditable(false);
        txtValidadeFinal.setBackground(new java.awt.Color(255, 255, 255));
        txtValidadeFinal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 83;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        PainelValidade.add(txtValidadeFinal, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText(" Ate: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        PainelValidade.add(jLabel6, gridBagConstraints);

        txtValidadeInicial.setEditable(false);
        txtValidadeInicial.setBackground(new java.awt.Color(255, 255, 255));
        txtValidadeInicial.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtValidadeInicial.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 83;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        PainelValidade.add(txtValidadeInicial, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 11, 0);
        PainelDadosCertificado.add(PainelValidade, gridBagConstraints);

        lblStatusCertificado.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 10, 5, 10);
        PainelDadosCertificado.add(lblStatusCertificado, gridBagConstraints);

        jLabel7.setBackground(new java.awt.Color(255, 255, 204));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Dados do Certificado");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel7.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        PainelDadosCertificado.add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.7;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 3, 1);
        PainelInternoGeral_Conteudo.add(PainelDadosCertificado, gridBagConstraints);

        PainelDadosCertificado1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PainelDadosCertificado1.setOpaque(false);
        PainelDadosCertificado1.setLayout(new java.awt.GridBagLayout());

        txtCadeiaCertificado.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        PainelDadosCertificado1.add(txtCadeiaCertificado, gridBagConstraints);

        btCarregarCadeiaCertificado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btCarregarCadeiaCertificado.setText("Carregar");
        btCarregarCadeiaCertificado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCarregarCadeiaCertificadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        PainelDadosCertificado1.add(btCarregarCadeiaCertificado, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText(" [3] Cadeia de Certificados ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        PainelDadosCertificado1.add(jLabel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        PainelInternoGeral_Conteudo.add(PainelDadosCertificado1, gridBagConstraints);

        txtCertificadoSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCertificadoSenhaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        PainelInternoGeral_Conteudo.add(txtCertificadoSenha, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("[1] Certificado Digital");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelInternoGeral_Conteudo.add(jLabel4, gridBagConstraints);

        btValidarCertificado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btValidarCertificado.setText("Validar Certificado");
        btValidarCertificado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btValidarCertificadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelInternoGeral_Conteudo.add(btValidarCertificado, gridBagConstraints);

        PainelDadosCertificado2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PainelDadosCertificado2.setOpaque(false);
        PainelDadosCertificado2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        PainelDadosCertificado2.add(txtCSC, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText(" [5] Codigo de Segurança - CSC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        PainelDadosCertificado2.add(jLabel9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        PainelDadosCertificado2.add(txtIDToken, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText(" [4] ID Token");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        PainelDadosCertificado2.add(jLabel10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 1, 0);
        PainelInternoGeral_Conteudo.add(PainelDadosCertificado2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 4);
        PainelInternoGeral.add(PainelInternoGeral_Conteudo, gridBagConstraints);

        tpPrincipal.addTab("GERAL", PainelInternoGeral);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        PainelDadosURLConsulta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PainelDadosURLConsulta.setOpaque(false);
        PainelDadosURLConsulta.setLayout(new java.awt.GridBagLayout());

        txtURLProducaoConsulta.setText("https://appnfc.sefa.pa.gov.br/portal/view/consultas/nfce/consultanfce.seam");
        txtURLProducaoConsulta.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        PainelDadosURLConsulta.add(txtURLProducaoConsulta, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText(" [7] URL consulta produção");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        PainelDadosURLConsulta.add(jLabel11, gridBagConstraints);

        txtURLHomologacaoConsulta.setText("https://appnfc.sefa.pa.gov.br/portal-homologacao/view/consultas/nfce/consultanfce.seam");
        txtURLHomologacaoConsulta.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        PainelDadosURLConsulta.add(txtURLHomologacaoConsulta, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText(" [6] URL consulta homologação");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        PainelDadosURLConsulta.add(jLabel12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(22, 4, 17, 4);
        jPanel2.add(PainelDadosURLConsulta, gridBagConstraints);

        PainelDadosURLQrCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PainelDadosURLQrCode.setOpaque(false);
        PainelDadosURLQrCode.setLayout(new java.awt.GridBagLayout());

        txtURLProducaoQRCode.setText("https://appnfc.sefa.pa.gov.br/portal/view/consultas/nfce/nfceForm.seam?chNFe=");
        txtURLProducaoQRCode.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        PainelDadosURLQrCode.add(txtURLProducaoQRCode, gridBagConstraints);

        txtURLHomologacaoQRCode.setText("https://appnfc.sefa.pa.gov.br/portal-homologacao/view/consultas/nfce/nfceForm.seam?chNFe=");
        txtURLHomologacaoQRCode.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        PainelDadosURLQrCode.add(txtURLHomologacaoQRCode, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText(" [8] URL Qrcode homologação");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        PainelDadosURLQrCode.add(jLabel14, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText(" [9] URL Qrcode produção");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        PainelDadosURLQrCode.add(jLabel15, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(21, 3, 16, 3);
        jPanel2.add(PainelDadosURLQrCode, gridBagConstraints);

        btDesbloquearCamposAvancados.setText("(Des)bloquear Campos");
        btDesbloquearCamposAvancados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDesbloquearCamposAvancadosActionPerformed(evt);
            }
        });
        jPanel2.add(btDesbloquearCamposAvancados, new java.awt.GridBagConstraints());

        tpPrincipal.addTab("AVANÇADO", jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        PainelInterno.add(tpPrincipal, gridBagConstraints);

        jScrollPane2.setViewportView(PainelInterno);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        PainelCorpo.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.4;
        PainelPrincipal.add(PainelCorpo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(PainelPrincipal, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btFechar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFechar1ActionPerformed
        // TODO add your handling code here:
      
        this.dispose();
    }//GEN-LAST:event_btFechar1ActionPerformed

    private boolean CarregarUI(){
        boolean Ret = false;
        try {
           /* if(!Sistema.isOnline()){
                MetodosUI_Auxiliares.MensagemAoUsuarioSimplesAVISO("Não é possível configurar a nfce com o sistema off-line", "Sistema  OFF-Line");
                return false;
            }*/
            /*
            Integer nCodigoUsuario =ValidarAcessoAoProcesso.Verificar(null , UsuarioSistema.getIdUsuarioLogado(), "PDV_CFGNFCE", Sistema.getLojaAtual(), true, "Configurar NFC-e");
            if(nCodigoUsuario==0){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Usuário não possui permissão de acesso a este módulo", "Acesso não autorizado");
                return false;
            }
           */
            if(!CarregarUI_Form()){return false;}
            
            Ret=true;
             
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean CarregarUI_Form_TablePainel(){
        boolean Ret = false;
        try {
            
            
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean CarregarUI_Form(){
        boolean Ret = false;
        try {

            
            Integer Loja  = Sistema.getLojaAtual();
            ResultSet rs = NFCE_Configurar.ListarConfiguracao(Loja);
                  
            if(rs.next()){
                Integer Id = rs.getInt("id");               
                String Senha = TratamentoNulos.getTratarString().Tratar( rs.getString("certificado_senha"),"");
                txtCertificado.setText( TratamentoNulos.getTratarString().Tratar( rs.getString("certificado_nome"),""));
                txtCadeiaCertificado.setText( TratamentoNulos.getTratarString().Tratar( rs.getString("certificado_cadeia_nome"),""));
                txtCSC.setText( TratamentoNulos.getTratarString().Tratar( rs.getString("csc"),""));
                txtIDToken.setText( TratamentoNulos.getTratarString().Tratar( rs.getString("idtoken"),""));
                txtCertificadoSenha.setText( Senha);
                if(ValidarConfiguracaoPDV(Id)){
                   chkNFCeAtivada.setEnabled(true);
                }
               //  chkDanfeIReport.setSelected(rs.getBoolean("danfeireport"));
                chkNFCEValidada.setSelected(rs.getBoolean("validada"));
                chkNFCeAtivada.setSelected(rs.getBoolean("ativa"));
                chkNFEValidada.setSelected(rs.getBoolean("validanfe"));
                chkNFeAtivada.setSelected(rs.getBoolean("ativanfe"));
                
                String ArqCertificado = NFCE_Configurar.PegarCertificado(Loja);
                String ArqCertificadoCadeia = NFCE_Configurar.PegarCadeiaCertificado(Loja);
                chkNFCeAtivada.setVisible(false);
                this.NomeArqCertificado=ArqCertificado;
                this.NomeArqCadeiaCertificado=ArqCertificadoCadeia;
                
                config.setID(Id);
                
                if(!ArqCertificado.equalsIgnoreCase("")){
                    if(!ValidarCertificado(ArqCertificado, Senha)){return false;} 
                }
                if(rs.getBoolean("validada")){
                   chkNFCeAtivada.setEnabled(true);
                   btConfigurarNFCe.setEnabled(true);
                   chkNFeAtivada.setEnabled(true);
                  // btConfigurarNFE.setEnabled(true);
                }else{
                   chkNFCeAtivada.setEnabled(false); 
                   btConfigurarNFCe.setEnabled(false);
                   chkNFeAtivada.setEnabled(false); 
                   btConfigurarNFE.setEnabled(false);
                }
                
                

                
                if(lblStatusCertificado.getText().equalsIgnoreCase("Certificado OK") && ArqCertificadoCadeia.length()>0){
                   btConfigurarNFCe.setEnabled(true);               
                }
                
                txtURLHomologacaoQRCode.setText(TratamentoNulos.getTratarString().Tratar( rs.getString("url_qrcode_homologacao"),"https://appnfc.sefa.pa.gov.br/portal-homologacao/view/consultas/nfce/nfceForm.seam?chNFe="));
                txtURLProducaoQRCode.setText(TratamentoNulos.getTratarString().Tratar( rs.getString("url_qrcode_producao"),"https://appnfc.sefa.pa.gov.br/portal/view/consultas/nfce/nfceForm.seam?chNFe="));
                txtURLProducaoConsulta.setText( TratamentoNulos.getTratarString().Tratar( rs.getString("url_consulta_producao"),"https://appnfc.sefa.pa.gov.br/portal-homologacao/view/consultas/nfce/consultanfce.seam"));
                txtURLHomologacaoConsulta.setText(TratamentoNulos.getTratarString().Tratar( rs.getString("url_consulta_homologacao"),"https://appnfc.sefa.pa.gov.br/portal/view/consultas/nfce/consultanfce.seam"));
              
                
            }
            Ret=true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean ValidarConfiguracaoPDV(int Pk_NFCE_Config){
        boolean Ret = false;
        try {
            ResultSet rs = NFCE_Configurar.ListarConfiguracaoPDV(Pk_NFCE_Config);
            if(rs.next()){
              Integer Ambiente =  TratamentoNulos.getTratarInt().Tratar( rs.getInt("ambiente"),0);
              if(Ambiente>0){
                 Ret =true; 
              }
            }
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;    
    }
    private void btAtualizarDadosPDVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizarDadosPDVActionPerformed
        // TODO add your handling code here:
        try {
         
            if(!GravarConfiguracacao_Validar()){return ;}
             
            if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao("Confirma a configuração ?", "Configurar NFCe")==MetodosUI_Auxiliares_1.Sim()){
                Integer Ret = GravarConfiguracacao(pdvgerenciar.CodigoPDV());
                if(Ret>0){
                    //int ID = config.getID();                  
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesINFO("Configuração atualizada com sucesso", "Configuração OK");                    
                    /*if(config.getID()==0){
                        chkNFCEValidada.setSelected(true);
                        chkNFCeAtivada.setEnabled(true);
                        chkNFCeAtivada.setSelected(true);
                    }*/
                    btConfigurarNFCe.setEnabled(true);
                    //btConfigurarNFE.setEnabled(true);
                    config.setID(Ret);
                }else{
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível atualizar a configuração", "Configuração Falhou");
                    chkNFCeAtivada.setEnabled(false);
                    chkNFCeAtivada.setEnabled(false);
                    btConfigurarNFCe.setEnabled(false);
                }
            }

        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }//GEN-LAST:event_btAtualizarDadosPDVActionPerformed
    private boolean GravarConfiguracacao_Validar(){
        boolean Ret = false;
        try {
            if(!lblStatusCertificado.getText().equalsIgnoreCase("CERTIFICADO OK") && !lblStatusCertificado.getText().equalsIgnoreCase("")){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O certificado digital\n\nNÃO FOI VALIDADO", "Certificado não validado");
                return false;
            }
            
            if(NomeArqCertificado.equalsIgnoreCase("")){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi informado o certificado digital", "Certificado Não Informado");
                return false;
            }
            
            if(NomeArqCadeiaCertificado.equalsIgnoreCase("")){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi informado a cadeia de certificados digital", "Cadeia de Certificados Não Informado");
                return false;
            }
            
            if(txtIDToken.getText().equalsIgnoreCase("")){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi informado o ID do Token", "ID do Token Não Informado");
                return false;
            }
            
            if(txtIDToken.getText().trim().length()!=6){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Foi informado o ID do Token inválido.[Válido Ex: 000001]", "ID do Token Não Informado");
                return false;
            }
            
            if(txtCSC.getText().equalsIgnoreCase("")){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi informado o Código de Segurança  - CSC", "CSC Não Informado");
                return false;
            }
             
            if(txtCSC.getText().trim().length()>36){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Foi informado o Código de Segurança Inválido [Máximo 36 Caracteres] - CSC", "CSC Inválido");
                return false;
            }
            
            
             if(txtURLHomologacaoConsulta.getText().equalsIgnoreCase("")){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi informado URL consulta homologação", "URL consulta homologação Não Informado");
                return false;
            }

            if(txtURLProducaoConsulta.getText().equalsIgnoreCase("")){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi informado URL consulta produção", "URL consulta produção Não Informado");
                return false;
            }
            
           
             
            if(txtURLHomologacaoQRCode.getText().equalsIgnoreCase("")){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi informado URL qrcode homologação", "URL qrcode homologação Não Informado");
                return false;
            }
            
             if(txtURLProducaoQRCode.getText().equalsIgnoreCase("")){
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi informado URL qrcode produção", "URL qrcode produção Não Informado");
                return false;
            }
             
            
            Ret =true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private Integer GravarConfiguracacao(int CodigoPDV){
        Integer Ret = 0;
        try {
           
            byte[] Certificado = ManipulacaoArquivo2.LerArquivo_Binario(NomeArqCertificado);
            byte[] CadeiaCertificado = ManipulacaoArquivo2.LerArquivo_Binario(NomeArqCadeiaCertificado);
            
            config.setCertificado(Certificado);
            config.setCadeiaCertificado(CadeiaCertificado);
            // config.setDanfeIReport(chkDanfeIReport.isSelected());
            if(config.getID()==0){
                config.setAtivada(true);
                config.setValidada(true);
                config.setAtivadanfe(true);
            }else{
                config.setValidada(chkNFCEValidada.isSelected());
                config.setAtivada(chkNFCeAtivada.isSelected());
                config.setAtivadanfe(chkNFeAtivada.isSelected());
            }
            config.setCertificado_Nome(txtCertificado.getText());
            char[] Senha = txtCertificadoSenha.getPassword();
            config.setCertificado_Senha(new String( Senha));
           
            config.setCadeiaCertificado_Nome(txtCadeiaCertificado.getText());
            config.setLoja(Sistema.getLojaAtual());
            config.setModelo("65");
            config.setCSC(txtCSC.getText());
            config.setIDToken(txtIDToken.getText());
            config.setNaturezaOperacao("");
            config.setUrlConsultaDanfeHomologacao(txtURLHomologacaoConsulta.getText());
            config.setUrlConsultaDanfeProducao(txtURLProducaoConsulta.getText());
            config.setUrlConsultaQRcodeHomologacao(txtURLHomologacaoQRCode.getText());
            config.setUrlConsultaQRcodeProducao(txtURLProducaoQRCode.getText());
            
            
            Ret = NFCE_Configurar.GravarConfiguracao(config, CodigoPDV);
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private void btCarregarCertificadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCarregarCertificadoActionPerformed
        // TODO add your handling code here:
        CarregarCertificado();
    }//GEN-LAST:event_btCarregarCertificadoActionPerformed

    private void btCarregarCadeiaCertificadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCarregarCadeiaCertificadoActionPerformed
        // TODO add your handling code here:
        CarregarCadeiaCertificado();
    }//GEN-LAST:event_btCarregarCadeiaCertificadoActionPerformed

    private void btValidarCertificadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btValidarCertificadoActionPerformed
        // TODO add your handling code here:
        
         if (btValidarCertificado.getText().equalsIgnoreCase("Re-validar Certificado")) {
             if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao("Deseja realmente revalidar o certificado ?", "Revalidar Certificado")==MetodosUI_Auxiliares_1.Sim()){
                Revalidar();
             }
              
         }else{
            ValidarCert();
         }
         
    }//GEN-LAST:event_btValidarCertificadoActionPerformed
    private boolean ValidarCert(){
        boolean Ret = false;
        try {
            if (this.NomeArqCertificado.equalsIgnoreCase("")) {
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi informado o certificado digital", "Certificado Ausente");
                return false;
            }
            if (txtCertificadoSenha.getPassword().length==0) {
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi informado a senha do certificado digital", "Senha do Certificado");
                return false;
            }
            ValidarCertificado(this.NomeArqCertificado, new String(txtCertificadoSenha.getPassword()));

        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private void txtCertificadoSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCertificadoSenhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCertificadoSenhaActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //MetodosUI_Auxiliares.CentrarJDialog(this, this.getToolkit());
        if(!CarregouOK){this.dispose();}
    }//GEN-LAST:event_formWindowOpened

    private void btConfigurarNFCeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfigurarNFCeActionPerformed
        // TODO add your handling code here:
        frmNFCe_Config_Pdv configpdv = new frmNFCe_Config_Pdv(null, true,config.getID(),NFCE_Configurar.NFCE_MODELO);
        configpdv.setVisible(true);
        if(configpdv.isGravou()){
            if(ValidarConfiguracaoPDV(config.getID())){
               AtivarNFCe();             
            }else{
              DesativarNFCe();
            }
        }
    }//GEN-LAST:event_btConfigurarNFCeActionPerformed

    private void btDesbloquearCamposAvancadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDesbloquearCamposAvancadosActionPerformed
        // TODO add your handling code here:
        
        if (!txtURLHomologacaoConsulta.isEnabled()) {
            if (MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao("Estes campos são de uso excluivo do suporte DinnamuS. \nAltera-los de maneira incorreta pode ocaionar problemas no envio, consulta das nfc-e \n\nConfirma o desbloqueio ?", "Desbloqueio de campos avançados")==MetodosUI_Auxiliares_1.Sim()) {
                MetodosUI_Auxiliares_1.BloquearDesbloquearComponentes(PainelDadosURLConsulta, !txtURLHomologacaoConsulta.isEnabled());
                MetodosUI_Auxiliares_1.BloquearDesbloquearComponentes(PainelDadosURLQrCode, !txtURLProducaoQRCode.isEnabled());
                //MetodosUI_Auxiliares.BloquearDesbloquearComponentes(PainelDiversos, !chkDanfeIReport.isEnabled());
            }
        }else{
              MetodosUI_Auxiliares_1.BloquearDesbloquearComponentes(PainelDadosURLConsulta, false);
                MetodosUI_Auxiliares_1.BloquearDesbloquearComponentes(PainelDadosURLQrCode, false);
                //MetodosUI_Auxiliares.BloquearDesbloquearComponentes(PainelDiversos, false);
        }
        
    }//GEN-LAST:event_btDesbloquearCamposAvancadosActionPerformed

    private void btConfigurarNFEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfigurarNFEActionPerformed
        // TODO add your handling code here:
        frmNFCe_Config_Pdv configpdv = new frmNFCe_Config_Pdv(null, true,config.getID(),NFCE_Configurar.NFE_MODELO);
        configpdv.setVisible(true);
        if(configpdv.isGravou()){
            if(ValidarConfiguracaoPDV(configNFE.getID())){
               AtivarNFe();             
            }else{
              DesativarNFe();
            }
        }
    }//GEN-LAST:event_btConfigurarNFEActionPerformed
     private boolean AtivarNFe(){
        boolean Ret = false;
        try {            
            chkNFEValidada.setSelected(true);
            chkNFeAtivada.setSelected(true);
            chkNFeAtivada.setEnabled(true);
            
            
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean AtivarNFCe(){
        boolean Ret = false;
        try {            
            chkNFCEValidada.setSelected(true);
            chkNFCeAtivada.setSelected(true);
            chkNFCeAtivada.setEnabled(true);
            
            
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
     private boolean DesativarNFCe(){
        boolean Ret = false;
        try {            
            chkNFCEValidada.setSelected(false);
            chkNFCeAtivada.setSelected(false);
            chkNFCeAtivada.setEnabled(false);
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
      private boolean DesativarNFe(){
        boolean Ret = false;
        try {            
            chkNFEValidada.setSelected(false);
            chkNFeAtivada.setSelected(false);
            chkNFeAtivada.setEnabled(false);
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean Revalidar(){
        boolean Ret = false;
        try {
            //if(NFCE_Configurar.ExcluirConfiguracao()){                
                taDadosCertificado.setText("");
                txtCertificado.setText("");
               // txtCadeiaCertificado.setText("");
               // NomeArqCadeiaCertificado="";
                NomeArqCertificado="";
                txtValidadeFinal.setText("");
                txtValidadeInicial.setText("");
                btCarregarCertificado.setEnabled(true);
                lblStatusCertificado.setText("");
                lblStatusCertificado.setIcon(null);
                btValidarCertificado.setText("Validar Certificado");
                txtCertificadoSenha.setText("");
                txtCertificadoSenha.setEditable(true);
               // txtCSC.setText("");
               // txtIDToken.setText("");
                if(!NFCE_Configurar.ListarConfiguracao(Sistema.getLojaAtual()).next()){
                    chkNFCEValidada.setSelected(false);
                    chkNFCeAtivada.setEnabled(false);
                    chkNFCeAtivada.setSelected(false);
                    
                     chkNFEValidada.setSelected(false);
                    chkNFeAtivada.setEnabled(false);
                    chkNFeAtivada.setSelected(false);
                }
                
                
                return true;
           /* }else{
                MetodosUI_Auxiliares.MensagemAoUsuarioSimplesAVISO(NomeArqCertificado, "Revalidar NFCe");
                return false;
            }
            */
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean ValidarPropriedadeDoCertificado(String Propriedade){
        boolean Ret = false;
        try {
            String RazaoSocial="",CNPJ="";
            
            String[] Dados =  Propriedade.split(",");
            if(Dados!=null){
                if(Dados.length>0){
                    for (int i = 0; i < Dados.length; i++) {
                        String Dado = Dados[i];
                        if(Dado.contains("CN=")){
                            String[] DadoRazao = Dado.split(":");
                            if(DadoRazao!=null){
                               if(DadoRazao.length>1){
                                  RazaoSocial = DadoRazao[0].toUpperCase().replace("CN=", "");
                                  CNPJ=ManipulacaoString.DeixarSomenteNumeros(DadoRazao[1]);
                                  break;
                               }else{
                                  CNPJ="inexistente";
                               }                               
                            }
                                    
                        }
                        
                    }
                }
            }
            if(CNPJ.length()>0 ){
                if(CNPJ.equalsIgnoreCase("inexistente")){
                    Ret=true;
                }else{
                     
                    if(CNPJ.length()<14 ){                          
                           MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("CNPJ do certificado é  inválido [" + CNPJ +"] ","CNPJ Inválido");
                            return false;
                    }                    
                    ResultSet rsLoja = Sistema.getDadosLoja(Sistema.getLojaAtual(), false);
                    if(rsLoja.next()){
                       String Loja_Cnpj = ManipulacaoString.DeixarSomenteNumeros(TratamentoNulos.getTratarString().Tratar(rsLoja.getString("cnpj"),""));                                        
                       if(Loja_Cnpj.length()==14){
                            if(!CNPJ.substring(0, 8).equalsIgnoreCase(Loja_Cnpj.substring(0, 8))){
                                  MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O Certificado Digital foi emitido para o CNPJ abaixo:\n" + CNPJ+ "\n\nO PDV está configurado com o CNPJ abaixo :\n" +Loja_Cnpj , "Divergência no CNPJ");
                                  return false;
                             }
                       }else{                           
                           MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("CNPJ da loja é inválido [" + Loja_Cnpj +"] "," CNPJ da Loja Inválido");
                            return false;
                       }
                       Ret=true;
                    }
                }
            }
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean ValidarCertificado(String ArqCertificado, String Senha) {
        boolean Ret = false;
        try {            
                HashMap<String, Object> Dados = NFCeCertificadoA1.Dados(ArqCertificado, Senha);
                if (Dados != null) {
                    if (Dados.size() > 0) {
                        taDadosCertificado.setText(Dados.get("Certificado").toString());
                        Date dInicial = (Date)Dados.get("ValidadeInicial");                        
                        Date dFinal = (Date)Dados.get("ValidadeFinal");                        
                        Date DataAtual = Licenca.DataServidor();
                        ImageIcon imageIcon = null;
                        if (DataAtual.getTime() > dFinal.getTime()) {
                            imageIcon = new ImageIcon(getClass().getResource("/dinnamus/ui/img/No-entry.png"));
                            lblStatusCertificado.setText("CERTIFICADO VENCIDO");
                            txtCertificadoSenha.setEditable(true);
                        } else {                            
                            if(ValidarPropriedadeDoCertificado(Dados.get("Proprietario").toString())){                            
                                imageIcon = new ImageIcon(getClass().getResource("/dinnamus/ui/img/Yes.png"));
                                lblStatusCertificado.setText("CERTIFICADO OK");
                                txtCertificadoSenha.setEditable(false);
                                btValidarCertificado.setText("Re-validar Certificado");
                                btCarregarCertificado.setEnabled(false);
                            }else{
                               imageIcon = new ImageIcon(getClass().getResource("/dinnamus/ui/img/No-entry.png"));
                               lblStatusCertificado.setText("CERTIFICADO INVÁLIDO");
                               txtCertificadoSenha.setEditable(true); 
                            }
                        }
                        lblStatusCertificado.setIcon(imageIcon);
                        txtValidadeInicial.setText(DataHora.getCampoFormatado(DataHora.FormatDataPadrao, dInicial));
                        txtValidadeFinal.setText(DataHora.getCampoFormatado(DataHora.FormatDataPadrao, dFinal));
                        taDadosCertificado.setCaretPosition(0);
                        
                    }
                } else {
                    String MSG = NFCeCertificadoA1.getMSGErro();
                    if (!MSG.equalsIgnoreCase("")) {
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO(MSG, "CERTIFICADO NÃO VALIDADO");
                    }
                }       
                Ret=true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean CarregarCertificado(){
        boolean Ret = false;
        try {
            String Certific = MetodosUI_Auxiliares_1.ListarArquivos(null, ManipulacaoArquivo2.DiretorioDeTrabalho(), "*.pfx" , "Informe o Arquivo do Certificado Digital");
            if(!TratamentoNulos.getTratarString().Tratar(Certific, "").equalsIgnoreCase("")){
                this.NomeArqCertificado =Certific;              
                File f = ManipulacaoArquivo2.InstanciaExistenteFile(Certific);
                this.NomeArqCertificado = Certific;                
                txtCertificado.setText(f.getName());
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesINFO("Arquivo carregado com sucesso\n\nA Seguir , Digite a senha do certificado para validação", "Certificado Carregado - Senha Solicitada");
                txtCertificadoSenha.setText("");
                taDadosCertificado.setText("");
                txtValidadeFinal.setText("");
                txtValidadeInicial.setText("");
                lblStatusCertificado.setText("");
                lblStatusCertificado.setIcon(null);
                txtCertificadoSenha.requestFocus();
            }            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    private boolean CarregarCadeiaCertificado(){
        boolean Ret = false;
        try {
            String Certific = MetodosUI_Auxiliares_1.ListarArquivos(null, ManipulacaoArquivo2.DiretorioDeTrabalho(), "*.*" , "Informe o Arquivo da Cadeia de Certificados");
            if(!TratamentoNulos.getTratarString().Tratar(Certific, "").equalsIgnoreCase("")){
                
                File f = ManipulacaoArquivo2.InstanciaExistenteFile(Certific);                
                txtCadeiaCertificado.setText(f.getName());
                this.NomeArqCadeiaCertificado=Certific;
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesINFO("Cadeia de Certificados carregada com sucesso", "Cadeia de Certificados OK");
                
            }
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return Ret;
    }
    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PainelBotoes;
    private javax.swing.JPanel PainelCorpo;
    private javax.swing.JPanel PainelDadosCertificado;
    private javax.swing.JPanel PainelDadosCertificado1;
    private javax.swing.JPanel PainelDadosCertificado2;
    private javax.swing.JPanel PainelDadosURLConsulta;
    private javax.swing.JPanel PainelDadosURLQrCode;
    private javax.swing.JPanel PainelInterno;
    private javax.swing.JLabel PainelInternoGe;
    private javax.swing.JPanel PainelInternoGeral;
    private javax.swing.JPanel PainelInternoGeral_Conteudo;
    private javax.swing.JPanel PainelPrincipal;
    private javax.swing.JPanel PainelStatus;
    private javax.swing.JPanel PainelTitulo;
    private javax.swing.JPanel PainelValidade;
    private javax.swing.JButton btAtualizarDadosPDV;
    private javax.swing.JButton btCarregarCadeiaCertificado;
    private javax.swing.JButton btCarregarCertificado;
    private javax.swing.JButton btConfigurarNFCe;
    private javax.swing.JButton btConfigurarNFE;
    private javax.swing.JButton btDesbloquearCamposAvancados;
    private javax.swing.JButton btFechar1;
    private javax.swing.JButton btValidarCertificado;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkNFCEValidada;
    private javax.swing.JCheckBox chkNFCeAtivada;
    private javax.swing.JCheckBox chkNFEValidada;
    private javax.swing.JCheckBox chkNFeAtivada;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblStatusCertificado;
    private javax.swing.JTextArea taDadosCertificado;
    private javax.swing.JTabbedPane tpPrincipal;
    private javax.swing.JTextField txtCSC;
    private javax.swing.JTextField txtCadeiaCertificado;
    private javax.swing.JTextField txtCertificado;
    private javax.swing.JPasswordField txtCertificadoSenha;
    private javax.swing.JTextField txtIDToken;
    private javax.swing.JTextField txtURLHomologacaoConsulta;
    private javax.swing.JTextField txtURLHomologacaoQRCode;
    private javax.swing.JTextField txtURLProducaoConsulta;
    private javax.swing.JTextField txtURLProducaoQRCode;
    private javax.swing.JTextField txtValidadeFinal;
    private javax.swing.JTextField txtValidadeInicial;
    // End of variables declaration//GEN-END:variables
}

