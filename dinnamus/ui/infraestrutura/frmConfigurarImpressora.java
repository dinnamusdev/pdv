/*
 * frmConfigurarImpressora.java
 *
 * Created on 1 de Outubro de 2008, 12:02
 */

package dinnamus.ui.infraestrutura;

import br.TratamentoNulo.TratamentoNulos;
import br.com.log.LogDinnamus;
import br.com.ui.ItemLista;
import br.com.ui.MetodosUI_Auxiliares_1;
import br.comunicacao.Portas;
import dinnamus.metodosnegocio.sistema.Impressao;
import java.util.ArrayList;
import java.util.HashMap;
import javax.print.PrintService;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author  desenvolvedor
 */
public class frmConfigurarImpressora extends javax.swing.JDialog {
    
    /** Creates new form frmConfigurarImpressora */
    //private JTableDinnamuS dbgImpressoras = new JTableDinnamuS();
    public frmConfigurarImpressora(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
         if(!InicializarUI())
        {
           JOptionPane.showMessageDialog(this, "Não foi possível inicializar a UI.");
           this.dispose();
        }
    }
    
     public boolean InicializarUI()
    {
        boolean bRetorno=false;
        if(InicializarUI_ComboImpressoras()){
            if(InicializarGridImpressoras()){
                if (AtualizarGridImpressoras()){
                     cbImpressoras.setSelectedIndex(-1);
                     cbImpressoras.setEnabled(false);
                      bRetorno=true;
                    
                }
            }

        }
        
        return bRetorno;
    }
     public boolean AtualizarGridImpressoras(){
         boolean bRet=false;
         try {             
         
            dbgImpressoras.setRsDados(Impressao.ImpressorasDefinidas());
            dbgImpressoras.update(dbgImpressoras.getGraphics());
            
            bRet=true;
         } catch (Exception e) {
             LogDinnamus.Log(e);
         }
         
         return bRet;
     }
     public boolean InicializarGridImpressoras(){
         boolean bRet=false;
         try {

            dbgImpressoras.addClColunas("cod", "COD", 60);
            dbgImpressoras.addClColunas("impressora", "impressora".toUpperCase(), 200);
            dbgImpressoras.addClColunas("finalidade", "finalidade".toUpperCase(), 100);
            dbgImpressoras.addClColunas("porta", "porta".toUpperCase(), 100);
            
            
            bRet=true;
         } catch (Exception e) {
             LogDinnamus.Log(e);
         }

         return bRet;
     }
     
     public boolean IniciarUI_CBPortas(){
         boolean Ret = false;
         try {
             ArrayList<String> portas = Portas.getPortas();
             if(portas.size()>0){
                DefaultComboBoxModel defaultComboBoxModel = new DefaultComboBoxModel();
                defaultComboBoxModel.removeAllElements(); 
                for (int i = 0; i < portas.size(); i++) {                                        
                    defaultComboBoxModel.addElement(portas.get(i));
                }
             }        
             Ret=true;
         } catch (Exception e) {
             LogDinnamus.Log(e, true);
         }
         return Ret;
     }
     public boolean InicializarUI_ComboImpressoras()
    {
        boolean bRetorno=true;
        
        try {        
            
            PrintService[] ps=Impressao.ListaImpressorasInstaladas();
            for (PrintService printService : ps) {                
                cbImpressoras.addItem(printService.getName());

            }


            MetodosUI_Auxiliares_1.PreencherCombo(cbFinalidade, Impressao.FinalidadesComprovantes(), "FinalidadeComprovante", "CodigoTipoComprovante",true);
            
            
            
            //cbPorta.setModel(new DefaultComboBoxModel);
        
        } catch (Exception exception) {
            LogDinnamus.Log(exception);
            bRetorno=false;
        }

        return bRetorno;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        opTipoComunicacao = new javax.swing.ButtonGroup();
        PainelCorpo = new javax.swing.JPanel();
        PainelImpressora = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPorta = new javax.swing.JTextField();
        cbImpressoras = new javax.swing.JComboBox();
        cbFinalidade = new javax.swing.JComboBox();
        dbgImpressoras = new br.com.ui.JTableDinnamuS();
        jPanel1 = new javax.swing.JPanel();
        rbSpooler = new javax.swing.JRadioButton();
        rbDiretoNaPorta = new javax.swing.JRadioButton();
        PainelTopo = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        btFechar = new javax.swing.JButton();
        PainelBotoes = new javax.swing.JPanel();
        btIncluir = new javax.swing.JButton();
        btLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configurar Impressora");
        setMinimumSize(new java.awt.Dimension(493, 390));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(493, 390));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        PainelCorpo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        PainelCorpo.setMinimumSize(new java.awt.Dimension(493, 390));
        PainelCorpo.setPreferredSize(new java.awt.Dimension(493, 390));
        PainelCorpo.setLayout(new java.awt.GridBagLayout());

        PainelImpressora.setBorder(javax.swing.BorderFactory.createTitledBorder("Impressoras"));
        PainelImpressora.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Impressora");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelImpressora.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Porta");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelImpressora.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Finalidade");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelImpressora.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelImpressora.add(txtPorta, gridBagConstraints);

        cbImpressoras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbImpressorasActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelImpressora.add(cbImpressoras, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelImpressora.add(cbFinalidade, gridBagConstraints);

        dbgImpressoras.setExibirBarra(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        PainelImpressora.add(dbgImpressoras, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tipo de Comunicação", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        opTipoComunicacao.add(rbSpooler);
        rbSpooler.setText("Spooler Sistema Operacional");
        rbSpooler.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbSpoolerItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(rbSpooler, gridBagConstraints);

        opTipoComunicacao.add(rbDiretoNaPorta);
        rbDiretoNaPorta.setSelected(true);
        rbDiretoNaPorta.setText("Direto na Porta");
        rbDiretoNaPorta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbDiretoNaPortaItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(rbDiretoNaPorta, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelImpressora.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        PainelCorpo.add(PainelImpressora, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(PainelCorpo, gridBagConstraints);

        PainelTopo.setBackground(new java.awt.Color(0, 0, 0));
        PainelTopo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        PainelTopo.setLayout(new java.awt.GridBagLayout());

        lblTitulo.setBackground(new java.awt.Color(0, 0, 0));
        lblTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTitulo.setText("  IMPRESSORAS DE COMPROVANTES");
        lblTitulo.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.3;
        PainelTopo.add(lblTitulo, gridBagConstraints);

        btFechar.setBackground(new java.awt.Color(0, 0, 0));
        btFechar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/ui/Shut down_16x16.png"))); // NOI18N
        btFechar.setMnemonic('x');
        btFechar.setToolTipText("");
        btFechar.setBorderPainted(false);
        btFechar.setOpaque(false);
        btFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFecharActionPerformed(evt);
            }
        });
        btFechar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btFecharKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelTopo.add(btFechar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(PainelTopo, gridBagConstraints);

        PainelBotoes.setBackground(new java.awt.Color(0, 0, 0));
        PainelBotoes.setLayout(new java.awt.GridBagLayout());

        btIncluir.setBackground(new java.awt.Color(0, 0, 0));
        btIncluir.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btIncluir.setForeground(new java.awt.Color(255, 255, 255));
        btIncluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Add.png"))); // NOI18N
        btIncluir.setMnemonic('I');
        btIncluir.setText("Incluir Impressora");
        btIncluir.setBorderPainted(false);
        btIncluir.setOpaque(false);
        btIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIncluirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        PainelBotoes.add(btIncluir, gridBagConstraints);

        btLimpar.setBackground(new java.awt.Color(0, 0, 0));
        btLimpar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btLimpar.setForeground(new java.awt.Color(255, 255, 255));
        btLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dinnamus/ui/img/Erase.png"))); // NOI18N
        btLimpar.setMnemonic('R');
        btLimpar.setText("Remover Impressora");
        btLimpar.setBorderPainted(false);
        btLimpar.setOpaque(false);
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 16;
        PainelBotoes.add(btLimpar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(PainelBotoes, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIncluirActionPerformed
        // TODO add your handling code here:
        if(ValidarEntrada()){
            ItemLista i = (ItemLista) cbFinalidade.getSelectedItem();            
            String Impressora =  "" ;
            if(cbImpressoras.getSelectedIndex()>=0){
               Impressora = cbImpressoras.getSelectedItem().toString();
            }
            if(Impressao.IncluirImpressora(  Impressora , txtPorta.getText()  , Integer.parseInt( i.getIndice().toString()))){
               MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "Impressora incluida com sucesso", "Impressoras", "INFO");
               AtualizarGridImpressoras();
            }
            else{
               MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "Nao foi possível incluir a Impressora", "Impressoras", "AVISO");
            }
        }


    }//GEN-LAST:event_btIncluirActionPerformed
    private boolean ValidarEntrada(){
        boolean bRet=false;
        try {          
            if (rbDiretoNaPorta.isSelected()) {
                if (txtPorta.getText().toString().length() == 0) {
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "Não foi informado a PORTA que será utilizada", "Impressoras", "AVISO");
                    return false;
                } 
            }else if (rbSpooler.isSelected()) {
                    if (cbImpressoras.getSelectedIndex() < 0) {
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "Não foi informado a IMPRESSORA que será utilizada", "Impressoras", "AVISO");
                        return false;
                    }
            }
            if (cbFinalidade.getSelectedIndex() < 0) {
                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "Escolha a finalidade da impressora", "Impressoras", "AVISO");
                return false;
            }
            bRet = true;
        } catch (Exception e) {
            LogDinnamus.Log(e);
        }
        return bRet;
    }
    private void cbImpressorasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbImpressorasActionPerformed
        // TODO add your handling code here:

        
    }//GEN-LAST:event_cbImpressorasActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
            // TODO add your handling code here:
        try {
            if (dbgImpressoras.getjTable().getSelectedRows().length>0){
               String cCodigo= dbgImpressoras.getTbDinnamuS().getValueAt( dbgImpressoras.getLinhaAtual(), 0).toString();
               if(MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes(null, "Confirma a exclusão da impressora ?", "Excluir Imp.", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)==JOptionPane.YES_OPTION){
                  if(Impressao.Excluir_ImpressorasDefinidas(Integer.parseInt(cCodigo))){
                      MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "Impressora excluida com sucesso", "Exclusão de imp.", "INFO");
                      AtualizarGridImpressoras();
                  }else{
                      MetodosUI_Auxiliares_1.MensagemAoUsuarioSimples(null, "Não foi possivel excluir a Impressora", "Exclusão de imp.", "AVISO");
                  }
               }
            }
        } catch (Exception e) {
            LogDinnamus.Log(e);
        }
    }//GEN-LAST:event_btLimparActionPerformed

    private void btFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFecharActionPerformed
        try {
            dispose();
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }//GEN-LAST:event_btFecharActionPerformed

    private void btFecharKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btFecharKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btFecharKeyPressed

    private void rbDiretoNaPortaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbDiretoNaPortaItemStateChanged
        // TODO add your handling code here:
       
        try {
             if(rbDiretoNaPorta.isSelected()){
                cbImpressoras.setEnabled(false);
                cbImpressoras.setSelectedIndex(-1);
                txtPorta.setEnabled(true);
             }
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
       
       
    }//GEN-LAST:event_rbDiretoNaPortaItemStateChanged

    private void rbSpoolerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbSpoolerItemStateChanged
        // TODO add your handling code here:
        
        try {
             if(rbSpooler.isSelected()){
                txtPorta.setEnabled(false);
                txtPorta.setText("");
                cbImpressoras.setEnabled(true);
             }
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }//GEN-LAST:event_rbSpoolerItemStateChanged
    
    /**
     * @param args the command line arguments
     */
  
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PainelBotoes;
    private javax.swing.JPanel PainelCorpo;
    private javax.swing.JPanel PainelImpressora;
    private javax.swing.JPanel PainelTopo;
    private javax.swing.JButton btFechar;
    private javax.swing.JButton btIncluir;
    private javax.swing.JButton btLimpar;
    private javax.swing.JComboBox cbFinalidade;
    private javax.swing.JComboBox cbImpressoras;
    private br.com.ui.JTableDinnamuS dbgImpressoras;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.ButtonGroup opTipoComunicacao;
    private javax.swing.JRadioButton rbDiretoNaPorta;
    private javax.swing.JRadioButton rbSpooler;
    private javax.swing.JTextField txtPorta;
    // End of variables declaration//GEN-END:variables
    
}
